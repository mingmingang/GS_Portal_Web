@using Template_DevExpress_By_MFM.Models
@{
    ViewBag.Title = "Dashboard";
}

<style>
    #chart {
        height: 440px;
        width: 100%;
    }

</style>

<div class="content">
    <div class="container-fluid">
        <div class="page-title-box">
            <div class="row align-items-center">

                <div class="col-sm-12">
                    <h4 class="page-title">Dashboard</h4>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item active">Selamat Datang di Portal Marketing GS Battery</li>
                    </ol>

                </div>
            </div>
        </div>
        <!-- end row -->


        <input type="text" hidden id="temp_tab_card" />
        <input type="text" hidden id="temp_chart_bar_year" />
        <input type="text" hidden id="temp_chart_bar_month_number" />
        <input type="text" hidden id="temp_chart_bar_battery_type" />
        <input type="text" hidden id="temp_chart_bar_material_type" />
        <input type="text" hidden id="temp_chart_bar_brand" />
        <input type="text" hidden id="temp_chart_bar_group" />
        <input type="text" hidden id="temp_chart_bar_title" />

        <input type="text" hidden id="temp_chart_bar_year_forecast" />
        <input type="text" hidden id="temp_chart_bar_month_number_forecast" />
        <input type="text" hidden id="temp_chart_bar_battery_type_forecast" />
        <input type="text" hidden id="temp_chart_bar_material_type_forecast" />
        <input type="text" hidden id="temp_chart_bar_brand_forecast" />
        <input type="text" hidden id="temp_chart_bar_group_forecast" />

        <div class="row">
            <div class="col-lg-2">
                <div class="card mini-stat bg-pattern">
                    <div class="card-body mini-stat-img">
                        <div class="mini-stat-icon">
                            <i class="dripicons-broadcast bg-soft-primary text-primary float-right h4"></i>
                        </div>
                        <h6 class="text-uppercase mb-3 mt-0" style="font-size:9px !important;">Business Plan GS</h6>
                        <h5 class="mb-3">@ViewBag.dataBoardBusinessPlan</h5>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-success mr-2" style="font-size:11px !important;"> 12% <i class="mdi mdi-arrow-down"></i></span>From prev. year</p>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-success mr-2"></span></p>
                    </div>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="card mini-stat bg-pattern">
                    <div class="card-body mini-stat-img">
                        <div class="mini-stat-icon">
                            <i class="dripicons-broadcast bg-soft-primary text-primary float-right h4"></i>
                        </div>
                        <h6 class="text-uppercase mb-3 mt-0" style="font-size:9px !important;">Yearly Plan</h6>
                        <h5 class="mb-3">@ViewBag.dataBoardYearlyPlan</h5>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-success mr-2"> 12% <i class="mdi mdi-arrow-up"></i></span>From prev. year</p>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-success mr-2"> 4% <i class="mdi mdi-arrow-up"></i></span>From BP</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="card mini-stat bg-pattern">
                    <div class="card-body mini-stat-img">
                        <div class="mini-stat-icon">
                            <i class="dripicons-box bg-soft-primary text-primary float-right h4"></i>
                        </div>
                        <h6 class="text-uppercase mb-3 mt-0" style="font-size:9px !important;">Forecast</h6>
                        <h5 class="mb-3">@ViewBag.dataBoardForecast</h5>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-danger mr-2"> -6% <i class="mdi mdi-arrow-down"></i></span>From BP</p>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-success mr-2"> 3% <i class="mdi mdi-arrow-up"></i></span>From Yearly Plan</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="card mini-stat bg-pattern">
                    <div class="card-body mini-stat-img">
                        <div class="mini-stat-icon">
                            <i class="dripicons-tags bg-soft-primary text-primary float-right h4"></i>
                        </div>
                        <h6 class="text-uppercase mb-3 mt-0" style="font-size:9px !important;">PO Original</h6>
                        <h5 class="mb-3">@ViewBag.dataBoardPOOriginal</h5>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-danger mr-2"> -4% <i class="mdi mdi-arrow-down"></i></span>From BP</p>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-success mr-2"> 3% <i class="mdi mdi-arrow-up"></i></span>From Yearly Plan</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="card mini-stat bg-pattern">
                    <div class="card-body mini-stat-img">
                        <div class="mini-stat-icon">
                            <i class="dripicons-tags bg-soft-primary text-primary float-right h4"></i>
                        </div>
                        <h6 class="text-uppercase mb-3 mt-0" style="font-size:9px !important;">PO Agreed</h6>
                        <h5 class="mb-3">@ViewBag.dataBoardPOAgreed</h5>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-danger mr-2"> -6% <i class="mdi mdi-arrow-down"></i></span>From BP</p>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-success mr-2"> 3% <i class="mdi mdi-arrow-up"></i></span>From Yearly Plan</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="card mini-stat bg-pattern">
                    <div class="card-body mini-stat-img">
                        <div class="mini-stat-icon">
                            <i class="dripicons-tags bg-soft-primary text-primary float-right h4"></i>
                        </div>
                        <h6 class="text-uppercase mb-3 mt-0" style="font-size:9px !important;">Actual Delivery</h6>
                        <h5 class="mb-3">1.320</h5>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-danger mr-2"> -9% <i class="mdi mdi-arrow-down"></i></span>From BP</p>
                        <p class="text-muted mb-0" style="font-size:9px !important;"><span class="text-success mr-2"> 3% <i class="mdi mdi-arrow-up"></i></span>From Yearly Plan</p>
                    </div>
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-xl-12">
                <div class="card">
                    <div class="card-body">
                        <div class="col-12 row" style="margin:auto;text-align:right;position:absolute;">
                            @(Html.DevExtreme().SelectBox()
            .ID("select-years-forecast")
            .DataSource(d => d.WebApi().Controller("ListYears"))
            .DisplayExpr("years")
            .ValueExpr("years")
            .OnValueChanged("onValueChangedYearForecast")
            .Placeholder("Year")
            .Width(100)
        )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-months-forecast")
                    .DataSource(d => d.WebApi().Controller("ListMonths"))
                    .DisplayExpr("months")
                    .ValueExpr("id_recnum_month")
                    .OnValueChanged("onValueChangedMonthForecast")
                    .Placeholder("Month")
                    .Width(100)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-battery-type-forecast")
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/BatteryType.json").Key("ID"))
                    .DisplayExpr("Name")
                    .ValueExpr("ID")
                    .OnValueChanged("onValueChangedBatteryTypeForecast")
                    .Placeholder("Battery Type")
                    .Width(150)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-material-type-forecast")
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/MaterialType.json").Key("ID"))
                    .DisplayExpr("Name")
                    .ValueExpr("ID")
                    .OnValueChanged("onValueChangedMaterialTypeForecast")
                    .Placeholder("Material Type")
                    .Width(150)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-brand-forecast")
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/BrandType.json").Key("ID"))
                    .DisplayExpr("Name")
                    .ValueExpr("ID")
                    .OnValueChanged("onValueChangedBrandForecast")
                    .Placeholder("Brand")
                    .Width(150)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-group-forecast")
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/GroupBatteryType.json").Key("ID"))
                    .DisplayExpr("Name")
                    .ValueExpr("ID")
                    .OnValueChanged("onValueChangedGroupForecast")
                    .Placeholder("Group")
                    .Width(150)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().Button()
                    .ID("button-reset-forecast")
                    .OnClick("onClickResetForecast")
                    .Text("Reset")
                    .Width(100)
                )
                        </div>


                        @(Html.DevExtreme().Chart()
        .ID("bar-chart-forecast")
        .Size(s => s.Height(500))
        .Palette(VizPalette.SoftBlue)
        .CommonSeriesSettings(s => s
            .ArgumentField("month_forecast")
            .Type(SeriesType.Bar)
            .HoverMode(ChartSeriesHoverMode.AllArgumentPoints)
            .SelectionMode(ChartSeriesSelectionMode.OnlyPoint)
             .Label(l => l
              .CustomizeText(@<text>
                function() {
                    return this.valueText;
                }
            </text>)
            .Visible(true)
            .Format(f => f
                .Type(Format.FixedPoint)
                )
            )
        )
        .CommonAxisSettings(s => s
            .Grid(g => g.Visible(true))
        )
        .ArgumentAxis(l => l
        .Label(b => b
        .Format(Format.FixedPoint)

        .CustomizeText(@<text>
                function() {
                    @*return "Periode " + this.valueText;*@
                    return this.valueText;
                }
            </text>)
            ))
         .Legend(l => l
        .VerticalAlignment(VerticalEdge.Bottom)
        .HorizontalAlignment(HorizontalAlignment.Center)
    )
        .Margin(m => m
                                .Top(36)
                                .Bottom(20)
                                )
        .Series(s =>
        {
            s.Add().ValueField("yearly_plan").Name("Yearly Plan").Label(l => l.Visible(false));
            //s.Add().ValueField("n4").Name("N-4");
            //s.Add().ValueField("n3").Name("N-3");
            //s.Add().ValueField("n2").Name("N-2");
            s.Add().ValueField("n4_FIX").Name("N-4").Label(l => l.Visible(false));
            s.Add().ValueField("n3_FIX").Name("N-3").Label(l => l.Visible(false));
            s.Add().ValueField("n2_FIX").Name("N-2").Label(l => l.Visible(false));
            s.Add().ValueField("order_qty").Name("PO Actual").Label(l => l.Visible(false));
        })
       .ValueAxis(a => a
        .Add()
        .Label(l => l
            .Format(Format.FixedPoint)
           .CustomizeText(@<text>
                function() {
                    return this.valueText;
                }
            </text>)
            )
        )
        .Tooltip(t => t.Enabled(true)
            .Format(Format.FixedPoint)
            .CustomizeTooltip(@<text>
            function(arg) {
                        var bulan = "";
                        if(arg.seriesName != "Yearly Plan" && arg.seriesName != "PO Actual" && arg.point.data.date_forecast != ""){
                            var dt = new Date(arg.point.data.date_forecast);
                            bulan = "(" + addMonths(dt, parseInt(arg.seriesName.replace('N', ''))) + ")";
                        }

                        return { text: arg.seriesName + " " + bulan + " : " + arg.valueText + " - " + (arg.percent * 100).toFixed(2) + "%"};


            }
        </text>)
        )
        .Export(e => e.Enabled(true))
        .Title("Forecast")
    //.DataSource(new[] {
    //    new { Year = 1997, SMP = 263, MMP = 226, Cnstl = 10, Cluster = 1 },
    //    new { Year = 1999, SMP = 169, MMP = 256, Cnstl = 66, Cluster = 7 },
    //    new { Year = 2001, SMP = 57, MMP = 257, Cnstl = 143, Cluster = 43 },
    //    new { Year = 2003, SMP = 0, MMP = 163, Cnstl = 127, Cluster = 210 },
    //    new { Year = 2005, SMP = 0, MMP = 103, Cnstl = 36, Cluster = 361 },
    //    new { Year = 2007, SMP = 0, MMP = 91, Cnstl = 3, Cluster = 406 }
    //})

    .DataSource(d => d.WebApi().Controller("DashboardGetBarForecastWithParam").Key("year_forecast").LoadParams(new { tahun = "", bulan = "", battery_type = "", material_type = "", brandgroup = "" }))
    )

                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xl-12">
                <div class="card">
                    <div class="card-body">


                        <div class="col-12 row" style="margin:auto;text-align:right;position:absolute;">
                            @(Html.DevExtreme().SelectBox()
            .ID("select-years")
            .DataSource(d => d.WebApi().Controller("ListYears"))
            .DisplayExpr("years")
            .ValueExpr("years")
            .OnValueChanged("onValueChangedYear")
            .Placeholder("Year")
            .Width(100)
        )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-months")
                    .DataSource(d => d.WebApi().Controller("ListMonths"))
                    .DisplayExpr("months")
                    .ValueExpr("id_recnum_month")
                    .OnValueChanged("onValueChangedMonth")
                    .Placeholder("Month")
                    .Width(100)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-battery-type")
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/BatteryType.json").Key("ID"))
                    .DisplayExpr("Name")
                    .ValueExpr("ID")
                    .OnValueChanged("onValueChangedBatteryType")
                    .Placeholder("Battery Type")
                    .Width(150)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-material-type")
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/MaterialType.json").Key("ID"))
                    .DisplayExpr("Name")
                    .ValueExpr("ID")
                    .OnValueChanged("onValueChangedMaterialType")
                    .Placeholder("Material Type")
                    .Width(150)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-brand")
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/BrandType.json").Key("ID"))
                    .DisplayExpr("Name")
                    .ValueExpr("ID")
                    .OnValueChanged("onValueChangedBrand")
                    .Placeholder("Brand")
                    .Width(150)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().SelectBox()
                    .ID("select-group")
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/GroupBatteryType.json").Key("ID"))
                    .DisplayExpr("Name")
                    .ValueExpr("ID")
                    .OnValueChanged("onValueChangedGroup")
                    .Placeholder("Group")
                    .Width(150)
                )
                            &nbsp;
                            &nbsp;
                            @(Html.DevExtreme().Button()
                    .ID("button-reset")
                    .OnClick("onClickReset")
                    .Text("Reset")
                    .Width(100)
                )
                        </div>
                        @(Html.DevExtreme().Chart()
                .ID("bar-chart")
                .Size(s => s.Height(500))
                .Palette(VizPalette.GreenMist)
                .CommonSeriesSettings(s => s
                    .ArgumentField("bulan")
                    .ValueField("total")
                    .Type(SeriesType.Bar)
                    .Label(l => l
            .Visible(false)
            .Format(f => f
                .Type(Format.FixedPoint)
            //.Precision(2)
            )
        )
                )
                                //                .ZoomAndPan(z => z
                                //.ArgumentAxis(ChartZoomAndPanMode.Both)
                                //.ValueAxis(ChartZoomAndPanMode.Both)
                                //.DragToZoom(true)
                                //.AllowMouseWheel(true)
                                //.PanKey(EventKeyModifier.Shift)
                                //)

                                @*.CustomizeLabel(@<text>
                        function(data){
                        console.log(data.value.toLocaleString("en-US"));
                        data.value = data.value.toLocaleString("en-US");
                        }
                        </text>)*@

                                .SeriesTemplate(t => t
                                    .NameField("transaksi")
                                    .CustomizeSeries(@<text>
                                        function(valueFromNameField) {
                        if(valueFromNameField == "Yearly Plan"){
                            return { type: "line", label: { visible: true }, color: "#ff3f7a" };
                        }else if(valueFromNameField == "Business Plan"){
                            return { type: "line", label: { visible: false, verticalOffset: 60 }, color: "#05a6fc" }
                        }else{
                            return {};
                        }

                        @*return valueFromNameField === "Yearly Plan" ? { type: "line", label: { visible: true }, color: "#ff3f7a" } : {};*@
                                        }

                                        @*function(valueFromNameField) {
                                            return valueFromNameField === "Business Plan GS" ? { type: "line", label: { visible: true }, color: "#ebb734" } : {};
                                        }*@
                                    </text>)
                                )
        .ValueAxis(a => a
        .Add()
        .Label(l => l
            .Format(Format.FixedPoint)
            )
        )
                                .Title(t => t
                                    .Text("Summary")
                                //.Subtitle(s => s.Text("()"))
                                )
                                .Margin(m => m
                                .Top(36)
                                )
                                .Tooltip(t =>
                                    t.Enabled(true)
                                    .Shared(true)
                                    .Location(ChartTooltipLocation.Edge)
                                    .CustomizeTooltip(@<text>
                                        function(arg) {
                                            return {
                                            text: arg.seriesName + " : " + arg.value.toLocaleString("en-US")
                                            };
                                        }
                                    </text>)
                                    )
                                .Export(e => e.Enabled(true))
                                .Legend(l => l
                                    .VerticalAlignment(VerticalEdge.Bottom)
                                    .HorizontalAlignment(HorizontalAlignment.Center)
                                )
                            //.DataSource(Model)
                            .DataSource(d => d.WebApi().Controller("DashboardGetBarWithParam").LoadParams(new { tahun = "", bulan = "", battery_type = "", material_type = "", brandgroup = ""}))
                            )

                    </div>
                </div>
            </div>
        </div>

    </div>
                </div>
                <!-- content -->

<script>
        $(document).ready(function () {
            //document.getElementById("nav-first-tab").click();
        });

    function addMonths(date, months) {
        var d = date.getDate();
        date.setMonth(date.getMonth() + +months);
        if (date.getDate() != d) {
            date.setDate(0);
        }
        //console.log(date.toLocaleString('default', { month: 'long' }));
        return date.toLocaleString('default', { month: 'long' });
    }

    function getMonthForecastAPI(date, forecast) {
         var $link = '@Html.Raw(Url.Action("GetMonthForecast", "api", new { date = "replaceDate", forecast = "replaceForecast" }))';
        $link = $link.replace("replaceDate", encodeURIComponent(date));
        $link = $link.replace("replaceForecast", encodeURIComponent(forecast));
        var result = "";
        $.ajax({
            type: "GET",
            url: $link,
            beforeSend: function () {
            },
            success: function (response) {
                if (response.data != null && response.data.length > 0) {
                    result = response.data[0].months;
                    //console.log("hasil --->" + result);
                    return result;
                }
            },
            error: function (xhr, status, error) {
            }
        });

    }

    function onClickResetForecast() {
        let dataYear = document.getElementById("select-years-forecast");
        let ins1 = DevExpress.ui.dxSelectBox.getInstance(dataYear);
        ins1.option('value', "");

        let dataMonth = document.getElementById("select-months-forecast");
        let ins2 = DevExpress.ui.dxSelectBox.getInstance(dataMonth);
        ins2.option('value', "");

        let dataBattery = document.getElementById("select-battery-type-forecast");
        let ins3 = DevExpress.ui.dxSelectBox.getInstance(dataBattery);
        ins3.option('value', "");

        let dataMaterial = document.getElementById("select-material-type-forecast");
        let ins4 = DevExpress.ui.dxSelectBox.getInstance(dataMaterial);
        ins4.option('value', "");

        let dataBrand = document.getElementById("select-brand-forecast");
        let ins5 = DevExpress.ui.dxSelectBox.getInstance(dataBrand);
        ins5.option('value', "");

        let dataGroup = document.getElementById("select-group-forecast");
        let ins6 = DevExpress.ui.dxSelectBox.getInstance(dataGroup);
        ins6.option('value', "");

        $("#temp_chart_bar_year_forecast").val("");
        $("#temp_chart_bar_month_number_forecast").val("");
        $("#temp_chart_bar_battery_type_forecast").val("");
        $("#temp_chart_bar_material_type_forecast").val("");
        $("#temp_chart_bar_brand_forecast").val("");
        $("#temp_chart_bar_group_forecast").val("");
        getDataBarChartForecastWithParamLoad();
    }

    function onClickReset() {
        let dataYear = document.getElementById("select-years");
        let ins1 = DevExpress.ui.dxSelectBox.getInstance(dataYear);
        ins1.option('value', "");

        let dataMonth = document.getElementById("select-months");
        let ins2 = DevExpress.ui.dxSelectBox.getInstance(dataMonth);
        ins2.option('value', "");

        let dataBattery = document.getElementById("select-battery-type");
        let ins3 = DevExpress.ui.dxSelectBox.getInstance(dataBattery);
        ins3.option('value', "");

        let dataMaterial = document.getElementById("select-material-type");
        let ins4 = DevExpress.ui.dxSelectBox.getInstance(dataMaterial);
        ins4.option('value', "");

        let dataBrand = document.getElementById("select-brand");
        let ins5 = DevExpress.ui.dxSelectBox.getInstance(dataBrand);
        ins5.option('value', "");

        let dataGroup = document.getElementById("select-group");
        let ins6 = DevExpress.ui.dxSelectBox.getInstance(dataGroup);
        ins6.option('value', "");

        $("#temp_chart_bar_year").val("");
        $("#temp_chart_bar_month_number").val("");
        $("#temp_chart_bar_battery_type").val("");
        $("#temp_chart_bar_material_type").val("");
        $("#temp_chart_bar_brand").val("");
        $("#temp_chart_bar_group").val("");
        getDataBarChartWithParamLoad(null);
    }

        function onValueChangedYearForecast(e) {
            if (e.value != null) {
                $("#temp_chart_bar_year_forecast").val(e.value);
                getDataBarChartForecastWithParamLoad();
            }
        }

        function onValueChangedMonthForecast(e) {
            if (e.value != null) {
                console.log(e.value);
                $("#temp_chart_bar_month_number_forecast").val(e.value);
                getDataBarChartForecastWithParamLoad();
            }
        }

    function onValueChangedBatteryTypeForecast(e) {
        if (e.value != null) {
            $("#temp_chart_bar_battery_type_forecast").val(e.value);
            getDataBarChartForecastWithParamLoad();
        }
    }

    function onValueChangedMaterialTypeForecast(e) {
        if (e.value != null) {
            console.log(e.value);
            $("#temp_chart_bar_material_type_forecast").val(e.value);
            getDataBarChartForecastWithParamLoad();
        }
    }

    function onValueChangedBrandForecast(e) {
        if (e.value != null) {
            console.log(e.value);
            $("#temp_chart_bar_brand_forecast").val(e.value);
            getDataBarChartForecastWithParamLoad();
        }
    }

    function onValueChangedGroupForecast(e) {
        if (e.value != null) {
            console.log(e.value);
            $("#temp_chart_bar_group_forecast").val(e.value);
            getDataBarChartForecastWithParamLoad();
        }
    }

        function onValueChangedYear(e) {
            if (e.value != null) {
                $("#temp_chart_bar_year").val(e.value);
                getDataBarChartWithParamLoad(null);
            }
        }

        function onValueChangedMonth(e) {
            if (e.value != null) {
                $("#temp_chart_bar_month_number").val(e.value);
                getDataBarChartWithParamLoad("activity");
            }
        }

        function onValueChangedBatteryType(e) {
            if (e.value != null) {
                $("#temp_chart_bar_battery_type").val(e.value);
                getDataBarChartWithParamLoad(null);
            }
        }

        function onValueChangedMaterialType(e) {
            if (e.value != null) {
                $("#temp_chart_bar_material_type").val(e.value);
                getDataBarChartWithParamLoad(null);
            }
        }

    function onValueChangedBrand(e) {
        if (e.value != null) {
            $("#temp_chart_bar_brand").val(e.value);
            getDataBarChartWithParamLoad(null);
        }
    }

    function onValueChangedGroup(e) {
        if (e.value != null) {
            console.log(e.value);
            $("#temp_chart_bar_group").val(e.value);
            getDataBarChartWithParamLoad(null);
        }
    }

        function getDataBarChartWithParamLoad(value) {
            //var id_recnum_strd = $("#temp_tab_card").val();
            var tahun = $("#temp_chart_bar_year").val();
            var bulan = $("#temp_chart_bar_month_number").val();
            var battery_type = $("#temp_chart_bar_battery_type").val();
            var material_type = $("#temp_chart_bar_material_type").val();
            var brand = $("#temp_chart_bar_brand").val();
            var group = $("#temp_chart_bar_group").val();

            var dataGrid = document.getElementById("bar-chart");
            let instanceDataGrid = DevExpress.viz.dxChart.getInstance(dataGrid);
            var $link = '@Html.Raw(Url.Action("DashboardGetBarWithParam", "api", new {
                        //id_recnum_strd = "replaceID",
                        tahun = "replacetahun",
                        bulan = "replacebulan",
                        battery_type = "replacebattery_type",
                        material_type = "replacematerial_type",
                        brandgroup = "replacebrandGroup",
                    }))';
            //$link = $link.replace("replaceID", encodeURIComponent(id_recnum_strd));
            $link = $link.replace("replacetahun", encodeURIComponent(tahun));
            $link = $link.replace("replacebulan", encodeURIComponent(bulan));
            $link = $link.replace("replacebattery_type", encodeURIComponent(battery_type));
            $link = $link.replace("replacematerial_type", encodeURIComponent(material_type));
            $link = $link.replace("replacebrandGroup", encodeURIComponent(brand + "|" + group));

        //if (value != null) {
        //    instanceDataGrid.option('commonSeriesSettings.argumentField', value);
        //}

            instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                //key: "id_recnum_strd",
                loadUrl: $link,
                insertUrl: $link,
                updateUrl: $link,
                deleteUrl: $link
            }));
    }


    function getDataBarChartForecastWithParamLoad() {

        var vtahun = $("#temp_chart_bar_year_forecast").val();
        var vbulan = $("#temp_chart_bar_month_number_forecast").val();
        var battery_type = $("#temp_chart_bar_battery_type_forecast").val();
        var material_type = $("#temp_chart_bar_material_type_forecast").val();
        var brand = $("#temp_chart_bar_brand_forecast").val();
        var group = $("#temp_chart_bar_group_forecast").val();

        if (vtahun != null && vtahun != "") {
            vtahun = vtahun;
        }

        if (vbulan != null && vtahun != "") {
            vbulan = vbulan;
        }

            var dataGrid = document.getElementById("bar-chart-forecast");
            let instanceDataGrid = DevExpress.viz.dxChart.getInstance(dataGrid);
            var $link = '@Html.Raw(Url.Action("DashboardGetBarForecastWithParam", "api", new { 
                        tahun = "replacetahun", 
                        bulan = "replacebulan",
                        battery_type = "replacebatterytype",
                        material_type = "replacematerialtype" ,
                        brandgroup = "replacebulanGroup" 
                    }
                    ))';

        $link = $link.replace("replacetahun", encodeURIComponent(vtahun));
        $link = $link.replace("replacebulan", encodeURIComponent(vbulan));
        $link = $link.replace("replacebatterytype", encodeURIComponent(battery_type));
        $link = $link.replace("replacematerialtype", encodeURIComponent(material_type));
        $link = $link.replace("replacebulanGroup", encodeURIComponent(brand + '|' + group));

            instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                key: "year_forecast",
                loadUrl: $link,
            }));
    }

</script>
