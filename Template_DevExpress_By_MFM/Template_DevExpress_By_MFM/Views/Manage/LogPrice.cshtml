@using Template_DevExpress_By_MFM.Models
@{
    ViewBag.Title = "Log Unit Price";
}


<!-- Left Sidebar End -->
<!-- ============================================================== -->
<!-- Start right Content here -->
<!-- ============================================================== -->
<!-- Start content -->
<style>
    .widget-container {
        margin-right: 320px;
    }

    .content h4 {
        margin-bottom: 10px;
        font-weight: 500;
        font-size: 18px;
    }

    .content {
        margin-top: 50px;
        margin-left: 10px;
    }

    .selected-item {
        margin-bottom: 20px;
    }

    #selected-files {
        display: none;
    }

    .options {
        padding: 20px;
        background-color: rgba(191, 191, 191, 0.15);
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: 260px;
    }

    .caption {
        font-size: 18px;
        font-weight: 500;
    }

    .option {
        margin-top: 10px;
    }

    .dx-datagrid-rowsview .column_class {
        text-align: left !important;
    }
</style>


<div class="content">
    <input type="text" hidden id="pq_id" />
    <div class="container-fluid" style="padding-bottom:-300px;">
        <div class="page-title-box">
            <div class="row align-items-center">
                <div class="col-sm-4">
                    <h4 class="page-title">Log Unit Price</h4>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="javascript:void(0);">Home</a></li>
                        <li class="breadcrumb-item" active><a href="javascript:void(0);">Log Unit Price</a></li>
                    </ol>

                </div>
            </div>
        </div>
    </div>

    <input type="text" id="temp_id" hidden />

    @(Html.DevExtreme().Popup()
            .ID("detail-popup")
            .Visible(false)
            .Width(350)
            .Height(200)
            .DragEnabled(true)
            .Position(PositionAlignment.Center)
            .CloseOnOutsideClick(false)
            .Container(".dx-viewport")
            .ShowTitle(true)
            .Title("Confirmation Delete")
            .Content(@<text>
                        Are you sure you want to delete this record?
            </text>)
 .ShowCloseButton(false)
 .ToolbarItems(items =>
 {
     items.Add()
     .Toolbar(Toolbar.Bottom)
     .Location(ToolbarItemLocation.Before)
     .Widget(widget => widget.Button()
         .Text("Yes")
         .OnClick("functionBtnDelete")
         );
     items.Add()
     .Toolbar(Toolbar.Bottom)
     .Location(ToolbarItemLocation.After)
     .Widget(widget => widget.Button()
         .Text("No")
         .OnClick(@<text>
                                function hideInfo(data) {
                                let dataPopUp = document.getElementById("detail-popup");
                                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                                popup.hide();
                                }
        </text>)
     );
})
    )

    @(Html.DevExtreme().Popup()
            .ID("form-scheduled")
            .Width(900)
            .Height(450)
            .Visible(true)
            .DragEnabled(true)
            .Position(PositionAlignment.Center)
            .CloseOnOutsideClick(false)
            .Container(".dx-viewport")
            .ShowTitle(true)
            .HideOnParentScroll(true)
            .Title("Form Log Unit Price")
            .Content(@<text>

                        @(Html.DevExtreme().Form()
                        .ID("formInputSchedule")
                        .ColCount(2)
                        //.OnInitialized("testing")
                        .ScrollingEnabled(true)
                        .Items(items =>
                        {


                            items.AddSimple().Label(label => label.Text("Periode").Location(FormLabelLocation.Top)).IsRequired(false).Editor(e => e
                                    .DateBox().DisplayFormat("MMM yyyy").CalendarOptions(c => c.MaxZoomLevel(CalendarZoomLevel.Year).MinZoomLevel(CalendarZoomLevel.Century))
                                    .ReadOnly(false).ID("log_period")).ColSpan(1);

                            items.AddSimple().Label(label => label.Text("Customer").Location(FormLabelLocation.Top)).IsRequired(true).Editor(e => e
                            .SelectBox()
                            .DataSource(d => d.WebApi().Controller("ManageMasterCustomer").Key("customer_id"))
                            .DisplayExpr("customer_name")
                            .ValueExpr("customer_id")
                            .SearchEnabled(true)
                            //.OnSelectionChanged("selectionChangedPN")
                            .ID("cust_id")).ColSpan(1);

                            items.AddSimple().Label(label => label.Text("Part Number").Location(FormLabelLocation.Top)).IsRequired(true).Editor(e => e
                            .SelectBox()
                            .DataSource(d => d.WebApi().Controller("ListPartNumber").Key("part_number"))
                            .DisplayExpr("part_number")
                            .ValueExpr("part_number")
                            .SearchEnabled(true)
                            .OnSelectionChanged("selectionChangedPN")
                            .ID("part_number")).ColSpan(1);


                            items.AddSimple().Label(label => label.Text("Battery Segmentation").Location(FormLabelLocation.Top)).IsRequired(false).Editor(e => e
                            .TextBox()
                            .ReadOnly(false).ID("batt_segmentation")).ColSpan(1);

                            items.AddGroup()
                            .ColCount(2)
                            .Items(groupItems =>
                            {
                                groupItems.AddSimple().Label(label => label.Text("OLD JIS").Location(FormLabelLocation.Top)).IsRequired(false).Editor(e => e
                                .TextBox()
                                .ReadOnly(false).ID("old_jis")).ColSpan(1);

                                groupItems.AddSimple().Label(label => label.Text("NEW JIS").Location(FormLabelLocation.Top)).IsRequired(false).Editor(e => e
                                .TextBox()
                                .ReadOnly(false).ID("new_jis")).ColSpan(1);
                            });


                            items.AddSimple().Label(label => label.Text("Unit Price").Location(FormLabelLocation.Top)).IsRequired(false).Editor(e => e
                            .NumberBox()
                            .ReadOnly(false).ID("unit_price")).ColSpan(1);

                            items.AddGroup()
                            .ColCount(1)
                            .Items(groupItems =>
                            {
                                groupItems.AddButton()
                            .Name("CANCEL")
                            .Visible(true)
                            .ButtonOptions(b => b.Text("CANCEL").Type(ButtonType.Normal).UseSubmitBehavior(false).OnClick("clickCanceled")).ColSpan(1);

                            });

                            items.AddGroup()
                            .ColCount(1)
                            .Items(groupItems =>
                            {
                                groupItems.AddButton()
                            .Name("SAVE DATA")
                            .Visible(true)
                            .ButtonOptions(b => b.Text("SAVE DATA").ID("btn_save_data").Type(ButtonType.Success).UseSubmitBehavior(false).OnClick("clickSaveFormContinue")).ColSpan(1);


                            });

                            //items.AddGroup()
                            //.ColCount(2)
                            //.Items(groupItems =>
                            //{

                            //    items.AddButton()
                            //.Name("UPDATE DATA")
                            //.Visible(false)
                            //.ButtonOptions(b => b.Text("UPDATE DATA").ID("btn_update_data").Type(ButtonType.Success).UseSubmitBehavior(false).OnClick("clickUpdateFormContinue")).ColSpan(1);

                            //});

                        })
                        //.LabelMode(FormLabelMode.Floating)
                        .LabelLocation(FormLabelLocation.Left)
                        .MinColWidth(300)
                        .ReadOnly(false)
                        .ShowColonAfterLabel(true)
                        )
                        <br />
                        <br />
                        <br />
            </text>)
          .ShowCloseButton(true)
    )

    <div class="row">
        <div class="col-12" id="table-data-alatvm">
            @(Html.DevExtreme().DataGrid<ManageLogPrice>().ID("gridContainer").ShowBorders(true)
    // FOR DOWNLOAD FUNCTION
    //.Selection(s => s.Mode(SelectionMode.Multiple))
        //.Export(e => e.Enabled(true).AllowExportSelectedData(true))
        //.OnExporting("exporting")
        .AllowColumnReordering(true)
        .AllowColumnResizing(true)
        .ColumnAutoWidth(true)
        .ColumnFixing(c => c.Enabled(true))
        .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
//.ShowColumnLines(true).ColumnChooser(c => c.Enabled(true).Mode(GridColumnChooserMode.Select))
        //.ColumnWidth(130)
        .ShowColumnLines(true)
        .WordWrapEnabled(true)
        .RowAlternationEnabled(true)
        .DataSource(d => d.WebApi().Controller("LogPrice").InsertAction(false).UpdateAction(false).DeleteAction(false).Key("id"))
        .Columns(columns =>
        {
            //columns.AddFor(m => m.id_recnum_min).Width(60).Caption("ID").AllowEditing(false);
            columns.Add().Caption("No").FormItem(i => i.Visible(false)).AllowEditing(false).CellTemplate(new JS("cell_numbering")).Alignment(HorizontalAlignment.Center);
            //columns.AddFor(m => m.quotation_period).Caption("Price Period").Alignment(HorizontalAlignment.Center).Format("dd/MM/yyyy").FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox()).ColSpan(2));
            columns.AddFor(m => m.log_part_number).Caption("Part Number").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.TextBox().ID("part_number")).ColSpan(2));
            columns.AddFor(m => m.log_PN_old_jis).Caption("OLD JIS").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("old_jis")).ColSpan(2));
            columns.AddFor(m => m.log_PN_new_jis).Caption("NEW JIS").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("new_jis")).ColSpan(2));
            columns.AddFor(m => m.log_unit_price).Caption("Price").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("unit_price")).ColSpan(1));
            columns.AddFor(m => m.log_status).Caption("Status")
            .Alignment(HorizontalAlignment.Center)
                                      .Lookup(lookup => lookup
                                          .DataSource(d => d.StaticJson().Url("~/Content/json_data/UserStatusActive.json").Key("ID"))
                                          .DisplayExpr("Name")
                                          .ValueExpr("ID")
                                      )
                                      .FormItem(i => i.Visible(true).Editor(e => e.SelectBox().SearchEnabled(false)));
            //DATE
            columns.AddFor(m => m.log_createDate).Caption("Unit Price Date").FormItem(i => i.Visible(false)).AllowEditing(false).Alignment(HorizontalAlignment.Center).Format("dd/MM/yyyy HH:mm:ss aa");
            //columns.AddFor(m => m.quotation_modifDate).Caption("Update Date").FormItem(i => i.Visible(false)).AllowEditing(false).Alignment(HorizontalAlignment.Center).Format("dd/MM/yyyy HH:mm:ss aa");
            columns.AddFor(m => m.log_createBy)
               .Visible(true)
               .Alignment(HorizontalAlignment.Center)
               .Caption("Action")
               .Type(GridCommandColumnType.Buttons)
               .Buttons(b =>
               {
                   b.Add()
                   .Icon("trash")
                    .Hint("Delete Data")
                   .OnClick("functionShowPopupDelete");
               });
        })
        .Grouping(grouping => grouping.AutoExpandAll(false).ExpandMode(GridGroupingExpandMode.RowClick))
        .GroupPanel(groupPanel => groupPanel.Visible(true))
        .Paging(p => p.PageSize(10))
        .Pager(pager =>
        {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new JS("[10, 50, 'all']"));
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
        })
       .Editing(editing =>
       {
           editing.Mode(GridEditMode.Popup);
           editing.Popup(p => p.Title("Create Unit Price").ShowTitle(true).Width("60%").Height("90%"));
           editing.AllowUpdating(false);
           editing.AllowAdding(false);
           editing.AllowDeleting(false);
           editing.UseIcons(true);
       })
       //.Selection(selection => selection.Mode(SelectionMode.Single))
       //.OnSelectionChanged("onSelectionChanged")
       .OnToolbarPreparing("onToolbarPreparing")
       .SearchPanel(f => f.Visible(true))
    .FilterRow(f => f.Visible(false))
    .HeaderFilter(f => f.Visible(true))
        //.GroupPanel(p => p.Visible(true))
        //.Grouping(g => g.AutoExpandAll(false))
        .RemoteOperations(true)
            //.Summary(s => s
            //    .TotalItems(totalItems => {
            //        totalItems.AddFor(m => m.ShipCity).SummaryType(SummaryType.Count);
            //    })
            //    .GroupItems(groupItems => {
            //        groupItems.Add().SummaryType(SummaryType.Count);
            //    })
            )
        </div>
    </div>
    <!-- container-fluid -->
</div>
<!-- content -->

@section scripts
{
    <script>


        function testing() {

            let dataForm = document.getElementById("formInputSchedule");
            let form = DevExpress.ui.dxForm.getInstance(dataForm);
            form.option("items[0].items[1].editorOptions.value", "coba ni");
            console.log(form.option("items[0].items[1]"));

        }

        $(document).ready(function () {

            let dataPopUp = document.getElementById("form-scheduled");
            let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
            popup.hide();

        });

        function selectionChangedCUST() {
             let dataDDL = document.getElementById("cust_id");
            let instanceDDL = DevExpress.ui.dxSelectBox.getInstance(dataDDL);
            ////console.log(instanceDDL.option("value"));

            @*var $link = '@Html.Raw(Url.Action("ListPartNumber", "api", new {bpid = "replaceroomid"}))';
            $link = $link.replace("replaceroomid", encodeURIComponent(instanceDDL.option("value")));*@

            var $link = '@Html.Raw(Url.Action("ListPartNumber/get-PN", "api", new {
                cust_id = "replaceCustID"
            }))';
            $link = $link.replace("replaceCustID", encodeURIComponent(instanceDDL.option("value")));
            $.ajax({
                type: "GET",
                url: $link,
                beforeSend: function () {

                },
                success: function (response) {
                    if (response != null) {
                        if (response.data.length > 0) {
                            let dataSB = document.getElementById("part_number");
                            let instanceSelectBox = DevExpress.ui.dxSelectBox.getInstance(dataSB);
                            instanceSelectBox.option('dataSource', DevExpress.data.AspNet.createStore({
                                key: "part_number",
                                loadUrl: $link,
                                insertUrl: $link,
                                updateUrl: $link,
                                deleteUrl: $link
                            }));

                            instanceSelectBox.repaint();
                        }
                    }
                },
                error: function (xhr, status, error) {
                }
            });
        }

        function selectionChangedPN() {
             let dataDDL = document.getElementById("part_number");
            let instanceDDL = DevExpress.ui.dxSelectBox.getInstance(dataDDL);
            ////console.log(instanceDDL.option("value"));

            var $link = '@Html.Raw(Url.Action("ListPartNumber", "api", new {bpid = "replaceroomid"}))';
            $link = $link.replace("replaceroomid", encodeURIComponent(instanceDDL.option("value")));
            $.ajax({
                type: "GET",
                url: $link,
                beforeSend: function () {

                },
                success: function (response) {
                    if (response != null) {
                        if (response.data.length > 0) {
                            var loadData = response.data[0];

                            if (loadData != null) {
                                console.log(loadData);
                                var old_jis = loadData.PN_old_jis;
                                var new_jis = loadData.PN_new_jis;
                                var bat_seg = loadData.PN_batt_segmentation;

                                //console.log(old_jis);
                                //console.log(new_jis);

                                let dataType = document.getElementById("old_jis");
                                let instanceOLD = DevExpress.ui.dxTextBox.getInstance(dataType);
                                instanceOLD.option("value", old_jis);

                                let dataType2 = document.getElementById("new_jis");
                                let instanceNEW = DevExpress.ui.dxTextBox.getInstance(dataType2);
                                instanceNEW.option("value", new_jis);

                                let dataType3 = document.getElementById("batt_segmentation");
                                let instanceSEG = DevExpress.ui.dxTextBox.getInstance(dataType3);
                                instanceSEG.option("value", bat_seg);
                            }
                        }
                    }
                },
                error: function (xhr, status, error) {
                }
            });
        }

        function functionShowPopupDelete(e) {
            if (e.row.data != null) {
                //console.log(e.row.data.id);
                $("#temp_id").val(e.row.data.id);

                let dataPopUp = document.getElementById("detail-popup");
                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                popup.show();
            }
        }

        function functionBtnDelete() {
            var id = "";
            id = $("#temp_id").val()
            //console.log(id);

            if (id != null) {

                var $link = '@Html.Raw(Url.Action("PriceQuotation", "api", new { id = "replaceID" }))';
                $link = $link.replace("replaceID", encodeURIComponent(id));
            $.ajax({
                type: "DELETE",
                url: $link,
                beforeSend: function () {
                },
                success: function (response) {
                    if (response != null) {
                        if (response.Message == "success") {
                            DevExpress.ui.notify("Successfully deleted data!", "success", 600);
                            refreshTableDevExpress();
                        } else {
                            DevExpress.ui.notify("Failed delete data!", "error", 600);
                            refreshTableDevExpress();
                        }
                    }

                    let dataPopUp = document.getElementById("detail-popup");
                    let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                    popup.hide();
                },
                error: function (xhr, status, error) {
                    let dataPopUp = document.getElementById("detail-popup");
                    let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                    popup.hide();
                    DevExpress.ui.notify(error, "error", 600);
                }
            });

            }
        }

        function functionDownloadOrderByID(e) {
            var $link = '@Html.Raw(Url.Action("DownloadQuotationBy_ID", "UploadFile", new { ID_ORDER = "replaceID" }))';
            $link = $link.replace("replaceID", encodeURIComponent(e.row.key));
            window.location.href = $link;
        }

        function printIframe()
        {
            var iframe = document.frames
                ? document.frames['form-scheduled']
                : document.getElementById('form-scheduled');
            var ifWin = iframe.contentWindow || iframe;

            iframe.focus();
            ifWin.printPage();
            return false;
        }

        function checkvalidNumber(instance) {
            var iStatusValid = 0;
            if (instance.option("value") == null) {
                instance.option("validationStatus", "invalid");
                iStatusValid = 1;
            } else {
                instance.option("validationStatus", "valid");
            }
            return iStatusValid;
        }

        function clickSaveFormContinue() {
            var iStatusValid = 0;

            let oldjis = document.getElementById("old_jis");
            let instanceOldJIS = DevExpress.ui.dxTextBox.getInstance(oldjis);
            iStatusValid += checkvalidNumber(instanceOldJIS);

            let newjis = document.getElementById("new_jis");
            let instanceNewJIS = DevExpress.ui.dxTextBox.getInstance(newjis);
            iStatusValid += checkvalidNumber(instanceNewJIS);

            let batseg = document.getElementById("batt_segmentation");
            let instanceBattSegment = DevExpress.ui.dxTextBox.getInstance(batseg);
            iStatusValid += checkvalidNumber(instanceBattSegment);

            let customer = document.getElementById("cust_id");
            let instanceCustomer = DevExpress.ui.dxSelectBox.getInstance(customer);
            iStatusValid += checkvalidNumber(instanceCustomer);

            let partnum = document.getElementById("part_number");
            let instancePartNumber = DevExpress.ui.dxSelectBox.getInstance(partnum);
            iStatusValid += checkvalidNumber(instancePartNumber);

            let unpri = document.getElementById("unit_price");
            let instanceUnitPrice = DevExpress.ui.dxNumberBox.getInstance(unpri);
            iStatusValid += checkvalidNumber(instanceUnitPrice);

            let logper = document.getElementById("log_period");
            let instanceLogPeriod = DevExpress.ui.dxDateBox.getInstance(logper);

            const month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            //console.log(month[instanceLogPeriod.option("value").getMonth()]);
            //console.log(instanceLogPeriod.option("value").getMonth()+1);
            //console.log(instanceLogPeriod.option("value").getFullYear());
            if (iStatusValid > 0) {
                return DevExpress.ui.notify("Please fill the blank form!", "warning", 2000);
            }

            var $link = '@Html.Raw(Url.Action("LogPrice", "api"))';

            ////console.log("HASIL WOOOY");
            ////console.log(instanceLPPFee1.option("value"));

            var dataForm = {
                log_periode: month[instanceLogPeriod.option("value").getMonth()],
                log_periode_int: instanceLogPeriod.option("value").getMonth() + 1,
                log_year: instanceLogPeriod.option("value").getFullYear(),
                cust_id: instanceCustomer.option("value"),
                log_part_number: instancePartNumber.option("value"),
                log_PN_old_jis: instanceOldJIS.option("value"),
                log_PN_new_jis: instanceNewJIS.option("value"),
                log_PN_batt_segmentation: instanceBattSegment.option("value"),
                log_unit_price: instanceUnitPrice.option("value")
            }
            //console.log(dataForm);

            $.ajax({
                type: "POST",
                data: JSON.stringify(dataForm),
                contentType: 'application/json',
                url: $link,
                beforeSend: function () {
                },
                success: function (response) {
                    //console.log(response);
                    DevExpress.ui.notify(response.message, "success", 3000);
                    let dataPopUp = document.getElementById("form-scheduled");
                    let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                    popup.hide();
                    popup.repaint();

                    let dataForm = document.getElementById("formInputSchedule");
                    let instanceForm = DevExpress.ui.dxForm.getInstance(dataForm);
                    instanceForm.repaint();

                    if (response != null) {
                        if (response.Message == "success") {
                            DevExpress.ui.notify("Data berhasil disimpan!", "success", 3000);
                            refreshTableDevExpress();
                        } else {
                            DevExpress.ui.notify(response.Message, "error", 3000);
                        }
                    }
                },
                error: function (xhr, status, error) {
                    //console.log(error);
                    //console.log(status);

                    DevExpress.ui.notify(error, "error", 3000);
                }
            });
        }


        function clickPopup() {

            let dataPopUp = document.getElementById("form-scheduled");
            let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
            popup.show();
        }

        function clickCanceled() {
            let dataPopUp = document.getElementById("form-scheduled");
            let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
            popup.hide();
        }

        function exporting(e) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('ItemPartNumber');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Download-ItemPartNumber.xlsx');
                });
            });
            e.cancel = true;
        }

        function cell_numbering(cellElement, cellInfo) {
            cellElement.text(cellInfo.rowIndex + 1);
        }

        function getFileUploaderInstance() {
            return $("#file-uploader").dxFileUploader("instance");
        }

        function check_beforeupload(e) {
            //let selectTahun = document.getElementById("select-years");
            //let instanceSelectedTahun = DevExpress.ui.dxSelectBox.getInstance(selectTahun);
            //var valueTahun = instanceSelectedTahun.option("value");

            //if (valueTahun == null) {
            //    e.request.abort();
            //    DevExpress.ui.dialog.alert("Mohon untuk mengisi Tahun terlebih dahulu.", "Informasi");
            //}
        }

        function onFilesUploaded(e) {
            DevExpress.ui.dialog.alert("Proses Upload Selesai", "Informasi");
            location.reload(true);
        }

        function fileUploader_valueChanged(e) {
            var files = e.value;
            if (files.length > 0) {
                $("#selected-files .selected-item").remove();

                $.each(files, function (i, file) {
                    var $selectedItem = $("<div />").addClass("selected-item");
                    $selectedItem.append(
                        $("<span />").html("Name: " + file.name + "<br/>"),
                        $("<span />").html("Size " + file.size + " bytes" + "<br/>"),
                        $("<span />").html("Type " + file.type + "<br/>"),
                        $("<span />").html("Last Modified Date: " + file.lastModifiedDate)
                    );
                    $selectedItem.appendTo($("#selected-files"));
                });
                $("#selected-files").show();
            }
            else
                $("#selected-files").hide();
        }

        function acceptOption_changed(e) {
            getFileUploaderInstance().option("accept", e.value);
        }

        function uploadMode_changed(e) {
            getFileUploaderInstance().option("uploadMode", e.value);
        }

        function multipleOption_changed(e) {
            getFileUploaderInstance().option("multiple", e.value);
        }


        let refreshButton;
        let uploadButton;

        function onToolbarPreparing(e) {
            var dataGrid = e.component;

            //e.toolbarOptions.items[0].showText = 'always';
            //e.toolbarOptions.items.push({
            //    location: "after",
            //    widget: "dxButton",
            //    options: {
            //        text: "Upload Excel",
            //        icon: "upload",
            //        disabled: false,
            //        onClick: onUploadBtnClick,
            //        onInitialized: function (e) {
            //            uploadButton = e.component;
            //        }
            //    }
            //});

            e.toolbarOptions.items[0].showText = 'always';
            e.toolbarOptions.items.push({
                location: "after",
                widget: "dxButton",
                options: {
                    text: "Add",
                    icon: "add",
                    disabled: false,
                    onClick: clickPopup,
                    onInitialized: function (e) {
                        refreshButton = e.component;
                    }
                }
            });

            e.toolbarOptions.items[1].showText = 'always';
            e.toolbarOptions.items.push({
                location: "after",
                widget: "dxButton",
                options: {
                    text: "Refresh",
                    icon: "refresh",
                    disabled: false,
                    onClick: onRefreshBtnClick,
                    onInitialized: function (e) {
                        refreshButton = e.component;
                    }
                }
            });
        }

        function onUploadBtnClick() {
            document.getElementById("btn-modal-show").click();
        }

        function onRefreshBtnClick() {
            //location.reload(true);
            refreshTableDevExpress();
        }

        function refreshTableDevExpress() {
            let dataGrid = document.getElementById("gridContainer");
            let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
            var $link = '@Html.Raw(Url.Action("LogPrice", "api"))';

             instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                 key: "id",
                 loadUrl: $link,
                 insertUrl: $link,
                 updateUrl: $link,
                 deleteUrl: $link
             }));

             instanceDataGrid.refresh();
        }

        function onDeleteBtnClick() {
            //let dataGrid = $("#gridContainer").dxDataGrid("instance");
            //$.when.apply($, dataGrid.getSelectedRowsData().map(function (data) {
            //    return dataGrid.getDataSource().store().remove(data.ID);
            //})).done(function () {
            //    dataGrid.refresh();
            //});
        }

        function onSelectionChanged(data) {
            //refreshButton.option("disabled", !data.selectedRowsData.length);
        }

    </script>

}