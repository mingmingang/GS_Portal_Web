@using Template_DevExpress_By_MFM.Models
@using System.Globalization
@{

    ViewBag.Title = "Manage Price Simulation";
    var yearNow = DateTime.UtcNow.AddHours(7).AddYears(-1).ToString("yyyy");
    var dateFrom = DateTime.ParseExact(yearNow + "01" + "01", "yyyyMMdd", CultureInfo.InvariantCulture); // 2021-08-01 format untuk from
                                                                                                         //var dateFrom = DateTime.UtcNow.AddHours(7).AddYears(-1); // 2021-08-01 format untuk from
    var dateto = DateTime.UtcNow.AddHours(7); // 2021-08-01 format untuk to
    var sFrom = dateFrom.ToString("yyyy-MM-dd");
    var sTo = dateto.ToString("yyyy-MM-dd");


    var logSession = HttpContext.Current.Session["SHealth"] as SessionLogin;
}

<style>
    

    .widget-container {
        margin-right: 320px;
    }

    .content h4 {
        margin-bottom: 10px;
        font-weight: 500;
        font-size: 18px;
    }

    .content {
        margin-top: 50px;
        margin-left: 10px;
    }

    .selected-item {
        margin-bottom: 20px;
    }

    #selected-files {
        display: none;
    }

    .options {
        padding: 20px;
        background-color: rgba(191, 191, 191, 0.15);
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: 260px;
    }

    .caption {
        font-size: 18px;
        font-weight: 500;
    }

    .option {
        margin-top: 10px;
    }

    .dx-dateviewroller-day {
        visibility: hidden;
    }
</style>


<div class="content">
    <div class="container-fluid" style="padding-bottom:-300px;">
        <div class="page-title-box">
            <div class="row align-items-center">
                <div class="col-sm-4">
                    <h4 class="page-title">Price Simulation</h4>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="javascript:void(0);">Home</a></li>
                        <li class="breadcrumb-item" active><a href="javascript:void(0);">Price Simulation</a></li>
                    </ol>
                </div>
                <input type="text" id="temp_id" hidden />
                <input type="text" id="temp_batt_segment" hidden />
                <input type="text" id="temp_new_jis" hidden />
                <input type="text" id="temp_old_jis" hidden />
                <input type="text" id="temp_req_qty" hidden />
                <input type="text" id="temp_unit_price" hidden />


            </div>
        </div>
    </div>
    <!-- end row -->
    @*<div class="row col-12" id="loading-spinner">
            <div class="spinner-border text-info" role="status" style="margin:auto;padding:20px;">
                <span class="sr-only">Loading...</span>
            </div>
        </div>*@

    <input id="custid" type="text" value="@logSession.npk" hidden />

    @(Html.DevExtreme().Popup()
            .ID("detail-popup")
            .Visible(false)
            .Width(350)
            .Height(200)
            .DragEnabled(true)
            .Position(PositionAlignment.Center)
            .CloseOnOutsideClick(false)
            .Container(".dx-viewport")
            .ShowTitle(true)
            .Title("Confirmation Delete")
            .Content(@<text>
                        Are you sure to delete this record?
            </text>)
     .ShowCloseButton(false)
     .ToolbarItems(items =>
     {
         items.Add()
         .Toolbar(Toolbar.Bottom)
         .Location(ToolbarItemLocation.Before)
         .Widget(widget => widget.Button()
             .Text("Yes")
             .OnClick("functionBtnDeleteHeader")
             );
         items.Add()
         .Toolbar(Toolbar.Bottom)
         .Location(ToolbarItemLocation.After)
         .Widget(widget => widget.Button()
             .Text("No")
             .OnClick(@<text>
                                    function hideInfo(data) {
                                    let dataPopUp = document.getElementById("detail-popup");
                                    let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                                    popup.hide();
                                    }
            </text>)
         );
    })
    )

    @(Html.DevExtreme().Popup()
            .ID("finish-popup")
            .Visible(false)
            .Width(350)
            .Height(200)
            .DragEnabled(true)
            .Position(PositionAlignment.Center)
            .CloseOnOutsideClick(false)
            .Container(".dx-viewport")
            .ShowTitle(true)
            .Title("Close Transaction")
            .Content(@<text>
                        Are you sure to close this transaction?
            </text>)
 .ShowCloseButton(false)
 .ToolbarItems(items =>
 {
     items.Add()
     .Toolbar(Toolbar.Bottom)
     .Location(ToolbarItemLocation.Before)
     .Widget(widget => widget.Button()
         .Text("Yes")
         .OnClick("functionBtnFinish")
         );
     items.Add()
     .Toolbar(Toolbar.Bottom)
     .Location(ToolbarItemLocation.After)
     .Widget(widget => widget.Button()
         .Text("No")
         .OnClick(@<text>
                                function hideInfo(data) {
                                let dataPopUp = document.getElementById("finish-popup");
                                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                                popup.hide();
                                }
        </text>)
     );
})
    )

    @(Html.DevExtreme().Popup()
            .ID("submit-popup")
            .Visible(false)
            .Width(350)
            .Height(200)
            .DragEnabled(true)
            .Position(PositionAlignment.Center)
            .CloseOnOutsideClick(false)
            .Container(".dx-viewport")
            .ShowTitle(true)
            .Title("Submit Transaction")
            .Content(@<text>
                        Are you sure to submit this transaction?
            </text>)
 .ShowCloseButton(false)
 .ToolbarItems(items =>
 {
     items.Add()
     .Toolbar(Toolbar.Bottom)
     .Location(ToolbarItemLocation.Before)
     .Widget(widget => widget.Button()
         .Text("Yes")
         .OnClick("functionBtnSubmit")
         );
     items.Add()
     .Toolbar(Toolbar.Bottom)
     .Location(ToolbarItemLocation.After)
     .Widget(widget => widget.Button()
         .Text("No")
         .OnClick(@<text>
                                function hideInfo(data) {
                                let dataPopUp = document.getElementById("submit-popup");
                                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                                popup.hide();
                                }
        </text>)
     );
})
    )
    @(Html.DevExtreme().Popup()
            .ID("approval-popup")
            .Visible(false)
            .Width(350)
            .Height(200)
            .DragEnabled(true)
            .Position(PositionAlignment.Center)
            .CloseOnOutsideClick(false)
            .Container(".dx-viewport")
            .ShowTitle(true)
            .Title("Confirmation Approval")
            .Content(@<text>
                        Are you sure to approve this record?
            </text>)
 .ShowCloseButton(false)
 .ToolbarItems(items =>
 {
     items.Add()
     .Toolbar(Toolbar.Bottom)
     .Location(ToolbarItemLocation.Before)
     .Widget(widget => widget.Button()
         .Text("Yes")
         .OnClick("functionBtnApprove")
         );
     items.Add()
     .Toolbar(Toolbar.Bottom)
     .Location(ToolbarItemLocation.After)
     .Widget(widget => widget.Button()
         .Text("No")
         .OnClick(@<text>
                                function hideInfo(data) {
                                let dataPopUp = document.getElementById("approval-popup");
                                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                                popup.hide();
                                }
        </text>)
     );
})
    )
    @(Html.DevExtreme().Popup()
            .ID("insert-popup")
            .Width(900)
            .Height(700)
            .DragEnabled(true)
            .Position(PositionAlignment.Center)
            .CloseOnOutsideClick(true)
            .Container(".dx-viewport")
            //.OnShowing("OnShowPopUp")
            .ShowTitle(true)
            .Title("Form Price Simulation")
            .Content(@<text>

            <div style="padding:10px;margin-top:-20px;"><h2><label id="lbl_id">CUST01-MONTH-ID</label></h2></div>

            @(Html.DevExtreme().DataGrid<ManagePriceSimulation_temp>()
                .ID("popuptemp")
                .OnInitialized("setComponent")
                .ShowBorders(true)
                .AllowColumnReordering(true)
                .AllowColumnResizing(true)
                .ColumnAutoWidth(true)
                .ColumnFixing(c => c.Enabled(true))
                .RowAlternationEnabled(true)
                .Columns(columns =>
                {
                    //columns.AddFor(m => m.id_order).Caption("Order ID").Alignment(HorizontalAlignment.Center);// disable saat input. karena akan create dengan format berikut;

                    columns.Add().Width(80).Caption("No").AllowEditing(false).CellTemplate(new JS("cell_numbering")).Alignment(HorizontalAlignment.Center);
                    //columns.AddFor(m => m.month_order).Caption("Month").Alignment(HorizontalAlignment.Center);
                    //columns.AddFor(m => m.year_order).Caption("Year").Alignment(HorizontalAlignment.Center);
                    //columns.AddFor(m => m.price_sim_PN).Caption("Part Number").Alignment(HorizontalAlignment.Center).AllowEditing(true);

                    columns.AddFor(m => m.price_sim_batt_segmentation).SetCellValue("setCellValueBatterySegment").Caption("Battery Segment").Alignment(HorizontalAlignment.Center).AllowEditing(true).Lookup(e => e
                                .DataSource(d => d.WebApi().Controller("ListBattSegment").Key("PN_batt_segmentation"))
                                .DisplayExpr("PN_batt_segmentation")
                                .ValueExpr("PN_batt_segmentation")
                                );
                    //columns.AddFor(m => m.price_sim_batt_segmentation).Caption("Battery Segment").Alignment(HorizontalAlignment.Center).AllowEditing(true);
                    columns.Add().Caption("Battery Type").Columns(mergeColumn =>
                    {
                        mergeColumn.AddFor(m => m.price_sim_new_JIS).SetCellValue("setCellValueNewJIS").Caption("NEW JIS").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).Lookup(e => e
                                //mergeColumn.AddFor(m => m.price_sim_new_JIS).Caption("NEW JIS").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).Lookup(e => e
                                //.TextBox()
                                //.ReadOnly(false).ID("part_number"));
                                //.DataSource(d => d.WebApi().RouteName("ListNewJIS").Key("PN_new_jis").LoadParams(new { battseg = new JS("$('#temp_batt_segment').val()") }))
                                .DataSource("ListNewJIS")
                                .DisplayExpr("PN_new_jis")
                                .ValueExpr("PN_new_jis"));
                        mergeColumn.AddFor(m => m.price_sim_old_JIS).SetCellValue("setCellValueOldJIS").Caption("OLD JIS").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).Lookup(e => e
                                //mergeColumn.AddFor(m => m.price_sim_old_JIS).Caption("OLD JIS").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).Lookup(e => e
                                //.TextBox()
                                //.ReadOnly(false).ID("part_number"));
                                //.DataSource(d => d.WebApi().Controller("ListPartNumber").Key("PN_old_jis"))
                                //.DataSource(d => d.WebApi().Controller("ListPartNumber").Key("PN_old_jis"))//.LoadParams(new { jis = new JS("$('#temp_new_jis').val()") }))
                                .DataSource("ListOldJIS")//.LoadParams(new { jis = new JS("$('#temp_new_jis').val()") }))
                                .DisplayExpr("PN_old_jis")
                                .ValueExpr("PN_old_jis"));
                    }).Alignment(HorizontalAlignment.Center);

                    columns.AddFor(m => m.price_sim_PN).Caption("Part Number").Alignment(HorizontalAlignment.Center).AllowEditing(true).Visible(false).Lookup(e => e
                                //.TextBox()
                                //.ReadOnly(false).ID("part_number"));
                                .DataSource(d => d.WebApi().Controller("ListPartNumber").Key("part_number"))
                                .DisplayExpr("part_number")
                                .ValueExpr("part_number"));
                    columns.AddFor(m => m.price_sim_request_qty).Caption("Request Qty").Alignment(HorizontalAlignment.Center).AllowEditing(true);
                    columns.Add().Caption("Qty / Pallet").Columns(mergeColumn =>
                    {
                        mergeColumn.AddFor(m => m.price_sim_qty_pallet_L).Caption("L").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).AllowEditing(false);
                        mergeColumn.AddFor(m => m.price_sim_qty_pallet_S).Caption("S").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).AllowEditing(false);
                    }).Alignment(HorizontalAlignment.Center);
                    columns.AddFor(m => m.price_sim_adjust_qty).Caption("Adjust Qty").Alignment(HorizontalAlignment.Center).AllowEditing(true);
                    columns.Add().Caption("Total Pallet").Columns(mergeColumn =>
                    {
                        mergeColumn.AddFor(m => m.price_sim_total_pallet_L).Caption("L").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                        mergeColumn.AddFor(m => m.price_sim_total_pallet_S).Caption("S").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                    }).Alignment(HorizontalAlignment.Center);
                    columns.AddFor(m => m.price_sim_unit_price).Caption("Unit Price").Alignment(HorizontalAlignment.Center).AllowEditing(true);
                    columns.AddFor(m => m.price_sim_amount).Caption("Amount").Alignment(HorizontalAlignment.Center).AllowEditing(true);
                    columns.AddFor(m => m.price_sim_batt_weight).Caption("Battery Weight").Alignment(HorizontalAlignment.Center).AllowEditing(true);
                    columns.AddFor(m => m.price_sim_total_batt_weight).Caption("Total Battery Weight").Alignment(HorizontalAlignment.Center).AllowEditing(true);

                })
                .Paging(p => p.PageSize(10))
                 .Pager(pager =>
                 {
                     pager.Visible(true);
                     //pager.DisplayMode(GridPagerDisplayMode.Full);
                     pager.ShowPageSizeSelector(true);
                     pager.AllowedPageSizes(new JS("[10, 50, 'all']"));
                     pager.ShowInfo(true);
                     pager.ShowNavigationButtons(true);
                 })
                .Editing(editing =>
                {
                    editing.Mode(GridEditMode.Row);
                    editing.AllowAdding(true);
                    editing.AllowUpdating(true);
                    editing.AllowDeleting(true);
                    editing.UseIcons(true);
                })
                .Selection(selection => selection.Mode(SelectionMode.Single))
                .SearchPanel(f => f.Visible(true))
                .FilterRow(f => f.Visible(false))
                .HeaderFilter(f => f.Visible(false).AllowSearch(false))
                .OnEditorPreparing("OnEditorPreparingDataGrid")
                .OnContentReady("OnRowPreparingDataGrid")
                .OnSaving("OnSavingDataGrid")
                //.OnRowUpdating("OnSavingDataGrid")
                .DataSource(d => d.WebApi()
                    .Controller("PriceSimulationTemp")
                    .InsertAction(true)
                    .UpdateAction(true)
                    .DeleteAction(true)
                    .Key("recnum_id")
                //.LoadAction("ViewDetails")
                //.LoadParams(new { id = new JS("$('#temp_id').val()") })
                )
                  .Summary(s => s.TotalItems(items =>
                  {
                      items.AddFor(m => m.price_sim_request_qty).CustomizeText("customSummary");

                      items.AddFor(m => m.price_sim_total_pallet_L)
                      .DisplayFormat("{0}")
                      .ValueFormat(Format.FixedPoint)
                      .SummaryType(SummaryType.Sum);

                      items.AddFor(m => m.price_sim_total_pallet_S)
                      .DisplayFormat("{0}")
                      .ValueFormat(Format.FixedPoint)
                      .SummaryType(SummaryType.Sum);

                      items.AddFor(m => m.price_sim_total_batt_weight)
                     .CustomizeText("customSummaryTotal")
                     .DisplayFormat("{0}")
                     .ValueFormat(Format.Decimal)
                     .SummaryType(SummaryType.Sum);
                  }
                ))
            )

            <div style="padding:10px;margin-top:20px;"><label> TOTAL CONTAINER </label><input id="txt_container" type="text" style="margin-left:15px;"/></div>

            </text>)
            .ToolbarItems(items =>
            {
                items.Add()
                .Toolbar(Toolbar.Bottom)
                .Location(ToolbarItemLocation.After)
                .Widget(widget => widget.Button()
                .ID("btn_save")
                .Disabled(false)
                    .Text("Save All")
                    .OnClick("functionBtnSave")
                    );
                items.Add()
                .Toolbar(Toolbar.Bottom)
                .Location(ToolbarItemLocation.Before)
                .Widget(widget => widget.Button()
                    .Text("Cancel")
                    .OnClick(@<text>
                        function hideInfo(data) {
                                let dataPopUp = document.getElementById("insert-popup");
                                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                                popup.hide();
                        }
                </text>)
                    );
            })
            .ShowCloseButton(true)
        )

    <div class="row">
        <div class="col-12" id="table-data-PriceSim">

            @(Html.DevExtreme().DataGrid<ListHeaderManagePriceSimulation>()
.ID("gridContainer")
.OnInitialized("setComponent")
.ShowBorders(true)

// FOR DOWNLOAD FUNCTION
.Selection(s => s.Mode(SelectionMode.Multiple))
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.OnExporting("exporting")

.AllowColumnReordering(true)
.AllowColumnResizing(true)
.ColumnAutoWidth(true)
.ColumnFixing(c => c.Enabled(true))

.Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
.ShowColumnLines(true).ColumnChooser(c => c.Enabled(true).Mode(GridColumnChooserMode.Select))
//.ColumnWidth(130)
.RowAlternationEnabled(true)
.DataSource(d => d.WebApi().Controller("PriceSimulation").InsertAction(false).UpdateAction(false).DeleteAction(false).Key("price_sim_id"))
//.LoadParams(new { dateFrom = sFrom, dateTo = sTo }).Key("price_sim_id"))
//.LoadParams(new { dateFrom = sFrom, dateTo = sTo }).)
.Columns(columns => {
    //columns.Add().Width(80).Caption("No").AllowEditing(false).CellTemplate(new JS("cell_numbering")).Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.price_sim_id).Caption("Order ID").Alignment(HorizontalAlignment.Center);// disable saat input. karena akan create dengan format berikut;
    columns.AddFor(m => m.month_order).Caption("Month").Alignment(HorizontalAlignment.Center).Width(100);
    columns.AddFor(m => m.year_order).Caption("Year").Alignment(HorizontalAlignment.Center).Width(80);

    columns.AddFor(m => m.price_sim_createDate).Caption("Create Date").Format(Format.FixedPoint).Alignment(HorizontalAlignment.Center).AllowEditing(false).Visible(false);
    columns.AddFor(m => m.price_sim_modifDate).Caption("Modif Date").Format(Format.FixedPoint).Alignment(HorizontalAlignment.Center).AllowEditing(false).Visible(false);
    columns.AddFor(m => m.price_sim_status).Caption("Status").Alignment(HorizontalAlignment.Center).Lookup(lookup => lookup
                                      .DataSource(d => d.StaticJson().Url("~/Content/json_data/StatusPriceApproval.json").Key("ID"))
                                      .DisplayExpr("Name")
                                      .ValueExpr("ID")
                                  );
    //.Lookup(lookup => lookup
    //    .DataSource(d => d.StaticJson().Url("~/Content/json_data/StatusOrder.json").Key("ID"))
    //    .DisplayExpr("Name")
    //    .ValueExpr("ID")
    //);

    columns.AddFor(m => m.stat)
               .Visible(true)
               .Alignment(HorizontalAlignment.Center)
               .Caption("Action")
               .Type(GridCommandColumnType.Buttons)
               //.Buttons(b =>
               //{
               //    b.Add()
               //    .Icon("import")
               //   .Hint("Send Data")
               //    .OnClick("approvalPopUp");

               //    b.Add()
               //    .Icon("check")
               //   .Hint("Approve Data")
               //    .OnClick("approvalPopUp");

               //    b.Add()
               //    .Icon("trash")
               //   .Hint("Delete Data")
               //    .OnClick("functionShowPopupDelete");

               //})
               .CellTemplate((
        @<text>
            <% if (data.price_sim_status == 0) { %>
                @if (logSession.userrole == "customer") {
                    <div>
                        @*<% return `<a href="#" class="dx-link dx-icon-trash dx-link-icon"></a><a href="#" class="dx-link dx-icon-import dx-link-icon"></a>` %>*@
                        @(Html.DevExtreme().Button()
                            //.ID("btn_resend")
                            .Disabled(false)
                            .Type(ButtonType.Danger)
                            .Visible(true)
                            .Icon("trash")
                            .OnClick("function(e) { functionShowPopupDeleteJS(data); }")
                            )
                        @(Html.DevExtreme().Button()
                            //.ID("btn_resend")
                            .Disabled(false)
                            .Type(ButtonType.Normal)
                            .Visible(true)
                            .Icon("fab fa-telegram-plane")
                            .OnClick("function(e) { submitPopUpJS(data); }")
                            )
                    </div>
                 } else {
                    <div>
                       @*<% return `<a href="#" onclick="functionShowPopupDeleteJS(<%= data %>); return false;" class="dx-link dx-icon-trash dx-link-icon"></a><a href="#" class="dx-link dx-icon-check dx-link-icon"></a>` %>*@
                        @(Html.DevExtreme().Button()
                            //.ID("btn_resend")
                            .Disabled(false)
                            .Type(ButtonType.Normal)
                            .Visible(true)
                            .Icon("trash")
                            .OnClick("function(e) { functionShowPopupDeleteJS(data); }")
                            )
                    </div>
                 }
            <% } else if (data.price_sim_status == 1) { %>
                @if (logSession.userrole == "customer") {
                    <div>
                    </div>
                 } else {
                    <div>
                       @*<% return `<a href="#" onclick="functionShowPopupDeleteJS(<%= data %>); return false;" class="dx-link dx-icon-trash dx-link-icon"></a><a href="#" class="dx-link dx-icon-check dx-link-icon"></a>` %>*@
                        @(Html.DevExtreme().Button()
                            //.ID("btn_resend")
                            .Disabled(false)
                            .Type(ButtonType.Danger)
                            .Visible(true)
                            .Icon("trash")
                            .OnClick("function(e) { functionShowPopupDeleteJS(data); }")
                            )
                        @(Html.DevExtreme().Button()
                            //.ID("btn_resend")
                            .Disabled(false)
                            .Type(ButtonType.Default)
                            .Visible(true)
                            .Icon("check")
                            .OnClick("function(e) { approvalPopUpJS(data); }")
                            )
                    </div>
                 }
            <% } else {  %>
                @if (logSession.userrole == "customer") {
                    <div>
                        @*<% return `<a href="#" class="dx-link dx-icon-trash dx-link-icon"></a><a href="#" class="dx-link dx-icon-import dx-link-icon"></a>` %>*@
                    </div>
                 } else {
                    <div>
                       @* <% return `<a href="#" class="dx-link dx-icon-check dx-link-icon"></a><a href="#" class="dx-link dx-icon-trash dx-link-icon"></a>` %>*@
                        @(Html.DevExtreme().Button()
                            //.ID("btn_resend")
                            .Disabled(false)
                            .Type(ButtonType.Danger)
                            .Visible(true)
                            .Icon("trash")
                            .OnClick("function(e) { functionShowPopupDeleteJS(data); }")
                            )
                        @(Html.DevExtreme().Button()
                            .Disabled(false)
                            .Type(ButtonType.Success)
                            .Visible(true)
                            .Icon("fas fa-clipboard-check")
                            .OnClick("function(e) { finishPopUpJS(data); }")
                            )
                    </div>
                 }
             @*<div>
               <% return `<a href="#" class="dx-link dx-icon-trash dx-link-icon"></a>` %>
            </div>*@
            <% } %>
        </text>));
})

            @*<div class="background-color:red !important;">
               <% return `<a href="#" class="dx-link dx-icon-check dx-link-icon"></a>
                <a href="#" class="dx-link dx-icon-trash dx-link-icon"></a>
                <a href="#" class="dx-link dx-icon-check dx-link-icon"></a>
                <a href="#" class="dx-link dx-icon-airplane dx-link-icon"></a>` %>
            </div>*@
            .MasterDetail(md => {
            md.Enabled(true);
            md.Template(@<text>
                @(Html.DevExtreme().DataGrid<ManagePriceSimulation>()
                .ColumnAutoWidth(true)
                .ID("MD_gridContainer")
                .ShowBorders(true)
                .Editing(editing =>
                {
                    editing.Mode(GridEditMode.Row);
                    editing.AllowAdding(false);
                    editing.AllowUpdating(true);
                    //editing.AllowUpdating(new JS("data.price_sim_status == 0 && " + @logSession.userrole + " == 'customer'"));
                    editing.AllowDeleting(true);
                    editing.UseIcons(true);
                })
                .HeaderFilter(f => f.Visible(true).AllowSearch(true))
                .Columns(columns =>
                {
                    //columns.AddFor(m => m.id_order).Caption("Order ID").Alignment(HorizontalAlignment.Center);// disable saat input. karena akan create dengan format berikut;

                    columns.Add().Width(80).Caption("No").AllowEditing(false).CellTemplate(new JS("cell_numbering")).Alignment(HorizontalAlignment.Center);
                    //columns.AddFor(m => m.month_order).Caption("Month").Alignment(HorizontalAlignment.Center);
                    //columns.AddFor(m => m.year_order).Caption("Year").Alignment(HorizontalAlignment.Center);
                    columns.AddFor(m => m.price_sim_PN).Caption("Part Number").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                    columns.Add().Caption("Battery Type").Columns(mergeColumn =>
                    {
                        mergeColumn.AddFor(m => m.price_sim_new_JIS).SetCellValue("setDocumentCategoryIdValue").Caption("NEW JIS").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).Lookup(e => e
                                //.TextBox()
                                //.ReadOnly(false).ID("part_number"));
                                .DataSource(d => d.WebApi().Controller("ListPartNumber").Key("PN_new_jis"))
                                .DisplayExpr("PN_new_jis")
                                .ValueExpr("PN_new_jis"));
                        mergeColumn.AddFor(m => m.price_sim_old_JIS).SetCellValue("setDocumentCategoryIdValue").Caption("OLD JIS").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).Lookup(e => e
                                //.TextBox()
                                //.ReadOnly(false).ID("part_number"));
                                //.DataSource(d => d.WebApi().Controller("ListPartNumber").Key("PN_old_jis"))
                                .DataSource(d => d.WebApi().Controller("ListPartNumber").Key("PN_old_jis"))//.LoadParams(new { jis = new JS("$('#temp_new_jis').val()") }))
                                .DisplayExpr("PN_old_jis")
                                .ValueExpr("PN_old_jis"));
                        //mergeColumn.AddFor(m => m.price_sim_old_JIS).Caption("OLD JIS").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                        //mergeColumn.AddFor(m => m.price_sim_new_JIS).Caption("NEW JIS").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                    }).Alignment(HorizontalAlignment.Center);
                    columns.AddFor(m => m.price_sim_batt_segmentation).Caption("Battery Segment").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                    columns.AddFor(m => m.price_sim_request_qty).Caption("Request Qty").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                    columns.Add().Caption("Qty / Pallet").Columns(mergeColumn =>
                    {
                        mergeColumn.AddFor(m => m.price_sim_qty_pallet_L).Caption("L").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).AllowEditing(false);
                        mergeColumn.AddFor(m => m.price_sim_qty_pallet_S).Caption("S").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint).AllowEditing(false);
                    }).Alignment(HorizontalAlignment.Center);
                    columns.AddFor(m => m.price_sim_adjust_qty).Caption("Adjust Qty").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                    columns.Add().Caption("Total Pallet").Columns(mergeColumn =>
                    {
                        mergeColumn.AddFor(m => m.price_sim_total_pallet_L).Caption("L").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                        mergeColumn.AddFor(m => m.price_sim_total_pallet_S).Caption("S").Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                    }).Alignment(HorizontalAlignment.Center);
                    columns.AddFor(m => m.price_sim_unit_price).Caption("Unit Price").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                    columns.AddFor(m => m.price_sim_amount).Caption("Amount").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                    columns.AddFor(m => m.price_sim_batt_weight).Caption("Battery Weight").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                    columns.AddFor(m => m.price_sim_total_batt_weight).Caption("Total Battery Weight").Alignment(HorizontalAlignment.Center).AllowEditing(false);

                })
                .OnRowPrepared("OnContentReady_Detail")
                .SortByGroupSummaryInfo(i => i.Add().SummaryItem("count"))
                .Summary(s => s.GroupItems(items =>
                {
                    items.AddFor(m => m.price_sim_batt_segmentation)
                    //.CustomizeText("customSummary")
                     .DisplayFormat("TOTAL ")
                .ShowInGroupFooter(false)
                .AlignByColumn(true);

                    items.AddFor(m => m.price_sim_request_qty)
                    //.CustomizeText("customSummaryTotal")
                    .ValueFormat(Format.FixedPoint)
                     .DisplayFormat("{0}")
                    .SummaryType(SummaryType.Sum)
            .ShowInGroupFooter(false)
            .AlignByColumn(true);
                    items.AddFor(m => m.price_sim_adjust_qty)
                     .ValueFormat(Format.FixedPoint)
                     .DisplayFormat("{0}")
                    .SummaryType(SummaryType.Sum)
            .ShowInGroupFooter(false)
            .AlignByColumn(true);
                    items.AddFor(m => m.price_sim_total_pallet_L)
                     .ValueFormat(Format.FixedPoint)
                     .DisplayFormat("{0}")
                    .SummaryType(SummaryType.Sum)
            .ShowInGroupFooter(false)
            .AlignByColumn(true);
                    items.AddFor(m => m.price_sim_total_pallet_S)
                     .ValueFormat(Format.FixedPoint)
                     .DisplayFormat("{0}")
                    .SummaryType(SummaryType.Sum)
            .ShowInGroupFooter(false)
            .AlignByColumn(true);

                    items.AddFor(m => m.price_sim_amount)
                     .ValueFormat(Format.FixedPoint)
                     .DisplayFormat("{0}")
                    .SummaryType(SummaryType.Sum)
            .ShowInGroupFooter(false)
            .AlignByColumn(true);

                    items.AddFor(m => m.price_sim_batt_weight)
                    .ValueFormat(Format.FixedPoint)
                    .DisplayFormat("{0}")
                   .SummaryType(SummaryType.Sum)
           .ShowInGroupFooter(false)
           .AlignByColumn(true);
                    items.AddFor(m => m.price_sim_total_batt_weight)
                    .ValueFormat(Format.FixedPoint)
                    .DisplayFormat("{0}")
                   .SummaryType(SummaryType.Sum)
           .ShowInGroupFooter(false)
           .AlignByColumn(true);

                }
                ))
                .Grouping(grouping => grouping.AutoExpandAll(false).ExpandMode(GridGroupingExpandMode.RowClick))
                .GroupPanel(groupPanel => groupPanel.Visible(true))
                .Paging(p => p.PageSize(10))
                .SearchPanel(f => f.Visible(true))
                .Pager(pager =>
                {
                    pager.Visible(true);
                    pager.DisplayMode(GridPagerDisplayMode.Full);
                    pager.ShowPageSizeSelector(true);
                    pager.AllowedPageSizes(new JS("[10, 50, 'all']"));
                    pager.ShowInfo(true);
                    pager.ShowNavigationButtons(true);
                })
                .DataSource(d => d.WebApi()
                    .Controller("PriceSimulation")
                    .InsertAction(true)
                    .UpdateAction(true)
                    .DeleteAction(true)
                    .Key("recnum_id")
                    .LoadAction("ViewDetails")
                    .LoadParams(new { id = new JS("data.price_sim_id") })
                ).Summary(s => s.TotalItems(items =>
                {
                    items.AddFor(m => m.price_sim_request_qty).CustomizeText("customSummary");

                    items.AddFor(m => m.price_sim_total_pallet_L)
                    .DisplayFormat("{0}")
                    .ValueFormat(Format.FixedPoint)
                    .SummaryType(SummaryType.Sum);

                    items.AddFor(m => m.price_sim_total_pallet_S)
                    .DisplayFormat("{0}")
                    .ValueFormat(Format.FixedPoint)
                    .SummaryType(SummaryType.Sum);

                    items.AddFor(m => m.price_sim_total_batt_weight)
                   .CustomizeText("customSummaryTotal")
                   .DisplayFormat("{0}")
                   .ValueFormat(Format.Decimal)
                   .SummaryType(SummaryType.Sum);
                }
                ))
                .OnEditorPreparing("MD_OnEditorPreparingDataGrid")
                .OnContentReady("MD_OnRowPreparingDataGrid")
                .OnSaving("MD_OnSavingDataGrid")
            //// FOR DOWNLOAD FUNCTION
            //.Selection(s => s.Mode(SelectionMode.Multiple))
            //.Export(e => e.Enabled(true).AllowExportSelectedData(true))
            //.OnExporting("exporting")
            )
            </text>);
            })
            .Paging(p => p.PageSize(10))
            .Pager(pager =>
            {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new JS("[10, 50, 'all']"));
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
            })
            .Editing(editing =>
            {
            editing.Mode(GridEditMode.Row);
            editing.AllowUpdating(false);
            editing.AllowAdding(false);
            editing.AllowDeleting(false);
            editing.UseIcons(true);
            })
            //.Selection(selection => selection.Mode(SelectionMode.Single))
            //.OnSelectionChanged("onSelectionChanged")
            .OnToolbarPreparing("onToolbarPreparing")
            .SearchPanel(f => f.Visible(true))
            .FilterRow(f => f.Visible(false))
            //.HeaderFilter(f => f.Visible(true))
            .HeaderFilter(f => f.Visible(true).AllowSearch(true))
            .RemoteOperations(true)
            )
        </div>

        <!-- container-fluid -->
    </div>
    <!-- content -->
</div>

@section scripts
{
    @*<script src="http://www.datejs.com/build/date.js" type="text/javascript"></script>*@
<script>

    //var logSession = HttpContext.Current.Session["SHealth"] as SessionLogin;

    //function onCheckAllowUpdating(data) {
    //    if (data.price_sim_status > 1) {
    //        if (SessionLogin.userrole == "customer") {
    //            return false;
    //        } else {
    //            return true;
    //        }
    //    }
    //}

    function OnShowPopUp(e) {
        //var palleteL = e.component.getTotalSummaryValue("price_sim_total_pallet_L");
        //var palleteS = e.component.getTotalSummaryValue("price_sim_total_pallet_S");
        //var totalBatWeight = e.component.getTotalSummaryValue("price_sim_total_batt_weight");
        //console.log(palleteL);
        //console.log(palleteS);
        //console.log(totalBatWeight);
        //var totalPallete = parseInt(palleteL) + parseInt(palleteS);
        console.log(e);
        let btnSave = document.getElementById("btn_save");
        let instanceSave = DevExpress.ui.dxButton.getInstance(btnSave);
        console.log(instanceSave);
        instanceSave.option("disabled", false);

        //if (totalPallete > 10) {
        //    //alert("MASUK");
        //    $("#txt_container").val("1");

        //    instanceSave.option("disabled", false);
        //}

        //if (totalPallete > 20) {
        //    DevExpress.ui.notify("Pallet melebihi kapasitas!", "warning", 3000);
        //} else if (parseInt(palleteL) > 10) {
        //    DevExpress.ui.notify("Maximal Pallet L = 10 Pallet", "warning", 3000);
        //} else if (totalBatWeight > 25000) {
        //    DevExpress.ui.notify("Maximal Pallet Container = 25 Ton", "warning", 3000);
        //}
    }

    function MD_OnSavingDataGrid(e) {
        console.log(e);
        console.log(e.component.hasEditData());
        console.log(e.changes[0].type);

        if (e.changes[0].type == "remove" && e.component.hasEditData() == true) {
            //return e.cancel = true;
        } else {
            var palleteL = parseInt(e.changes[0].data.price_sim_total_pallet_L) + e.component.getTotalSummaryValue("price_sim_total_pallet_L");
            var palleteS = parseInt(e.changes[0].data.price_sim_total_pallet_S) + e.component.getTotalSummaryValue("price_sim_total_pallet_S");

            console.log(palleteL);
            console.log(palleteS);

            var totalPallete = parseInt(palleteL) + parseInt(palleteS);
            var totalBatWeight = e.component.getTotalSummaryValue("price_sim_total_batt_weight");

            if (parseInt(palleteL) > 10) {
                DevExpress.ui.notify("Maximal Pallet L = 10 Pallet", "warning", 3000);
                e.cancel = true;
            }

            if (totalPallete > 20) {
                console.log("masuk ke >20");
                DevExpress.ui.notify("Pallet melebihi kapasitas!", "warning", 3000);
                e.cancel = true;
            }

            if (totalBatWeight > 25000) {
                DevExpress.ui.notify("Maximal Pallet Container = 25 Ton", "warning", 3000);
                e.cancel = true;
            }
        }
    }

    function OnSavingDataGrid(e) {
        //console.log(e);
        //console.log(e.component.hasEditData());
        //console.log(e.changes[0].type);




        if (e.changes[0].type == "remove" && e.component.hasEditData() == true) {
            //return e.cancel = true;
        } else {
            var palleteL = parseInt(e.changes[0].data.price_sim_total_pallet_L) + e.component.getTotalSummaryValue("price_sim_total_pallet_L");
            var palleteS = parseInt(e.changes[0].data.price_sim_total_pallet_S) + e.component.getTotalSummaryValue("price_sim_total_pallet_S");

            console.log(palleteL);
            console.log(palleteS);

            var totalPallete = parseInt(palleteL) + parseInt(palleteS);
            var totalBatWeight = e.component.getTotalSummaryValue("price_sim_total_batt_weight");

            if (parseInt(palleteL) > 10) {
                DevExpress.ui.notify("Maximal Pallet L = 10 Pallet", "warning", 3000);
                e.cancel = true;
            }

            if (totalPallete > 20) {
                console.log("masuk ke >20");
                DevExpress.ui.notify("Pallet melebihi kapasitas!", "warning", 3000);
                e.cancel = true;
            }

            if (totalBatWeight > 25000) {
                DevExpress.ui.notify("Maximal Pallet Container = 25 Ton", "warning", 3000);
                e.cancel = true;
            }
        }
    }

    function MD_OnRowPreparingDataGrid(e) {
        var palleteL = e.component.getTotalSummaryValue("price_sim_total_pallet_L");
        var palleteS = e.component.getTotalSummaryValue("price_sim_total_pallet_S");
        var totalPallete = parseInt(palleteL) + parseInt(palleteS);

        if (totalPallete > 10) {
            //alert("MASUK");
            $("#txt_container").val("1");
        }
    }

    function OnRowPreparingDataGrid(e) {
        var palleteL = e.component.getTotalSummaryValue("price_sim_total_pallet_L");
        var palleteS = e.component.getTotalSummaryValue("price_sim_total_pallet_S");
        var totalPallete = parseInt(palleteL) + parseInt(palleteS);
        //console.log(totalPallete);
        //var totalBatWeight = e.component.getTotalSummaryValue("price_sim_total_batt_weight");
        //console.log(palleteL);
        //console.log(palleteS);
        //console.log(totalBatWeight);

        if (totalPallete > 10) {
            //alert("MASUK");
            $("#txt_container").val("1");

            //let btnSave = document.getElementById("btn_save");
            //let instanceSave = DevExpress.ui.dxButton.getInstance(btnSave);
            //console.log(instanceSave);
            //instanceSave.option("disabled", false);
        }

        //if (totalPallete > 20) {
        //    DevExpress.ui.notify("Pallet melebihi kapasitas!", "warning", 3000);
        //} else if (parseInt(palleteL) > 10) {
        //    DevExpress.ui.notify("Maximal Pallet L = 10 Pallet", "warning", 3000);
        //} else if (totalBatWeight > 25000) {
        //    DevExpress.ui.notify("Maximal Pallet Container = 25 Ton", "warning", 3000);
        //}
    }

    $(document).ready(function () {
        //$("#option-order-id").hide();

        //if (location.search != null) {
        //    var myParam = location.search.split('order=')[1];
        //    if (myParam != "" && myParam != undefined) {
        //        let dataGrid = document.getElementById("gridContainer");
        //        let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
        //        instanceDataGrid.option("searchPanel.text", myParam)
        //        //instanceDataGrid.columnOption("Order ID", {
        //        //    selectedFilterOperation: "=",
        //        //    filterValue: myParam
        //        //});
        //    }
        //}

    });

    function setDocumentCategoryIdValue(newData, value) {
        this.defaultSetCellValue(newData, value);
    }

    function setCellValueBatterySegment(newData, value) {
        newData.price_sim_batt_segmentation = value;
        //newData.price_sim_new_JIS = null;
        //this.defaultSetCellValue(newData, value);
    }

    function setCellValueNewJIS(newData, value) {
        newData.price_sim_new_JIS = value;
        //newData.price_sim_old_JIS = null;
        //this.defaultSetCellValue(newData, value);
    }
    function setCellValueOldJIS(newData, value) {
        newData.price_sim_old_JIS = value;
        //this.defaultSetCellValue(newData, value);
    }

    function ListNewJIS(options) {
        var $linkNewJIS = '@Html.Raw(Url.Action("ListPartNumber/list-new-jis", "api"))';
        return {
            store: DevExpress.data.AspNet.createStore({
                key: "PN_new_jis",
                loadUrl: $linkNewJIS
            }),
            filter: options.data ? ["PN_batt_segmentation", "=", options.data.price_sim_batt_segmentation] : null
        };
        //$("#temp_batt_segment").val() = options.data.price_sim_batt_segmentation;
        //console.log($("#temp_batt_segment").val());
    }

    function ListOldJIS(options) {
        var $linkNewJIS = '@Html.Raw(Url.Action("ListPartNumber/list-new-jis", "api"))';

        return {
            store: DevExpress.data.AspNet.createStore({
                key: "PN_old_jis",
                loadUrl: $linkNewJIS
            }),
            filter: options.data ? ["PN_new_jis", "=", options.data.PN_new_jis] : null
        };
    }


    function MD_OnEditorPreparingDataGrid(e) {

        var qtyL;
        var qtyS;
        if (e.parentType == "dataRow" && e.dataField == "price_sim_batt_segmentation" && e.caption == "Battery Segment") {
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {
                e.setValue(args.value);
                defaultValueChangeHandler(args);
                $("#temp_batt_segment").val(args.value);
            }
        }
        if (e.parentType == "dataRow" && e.dataField == "price_sim_new_JIS" && e.caption == "NEW JIS") {
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {
                e.setValue(args.value);
                defaultValueChangeHandler(args);
                $("#temp_new_jis").val(args.value);
            }
        }

        if (e.parentType == "dataRow" && e.dataField == "price_sim_old_JIS" && e.caption == "OLD JIS") {
            if ($("#temp_new_jis").val() != null && $("#temp_new_jis").val() != "") {
                var $linkOldJIS = '@Html.Raw(Url.Action("list-old-jis", "api", new {jis = "replaceroomid"}))';
                $linkOldJIS = $linkOldJIS.replace("replaceroomid", encodeURIComponent($("#temp_new_jis").val()));
                e.editorOptions.dataSource = DevExpress.data.AspNet.createStore({
                    key: "PN_old_jis",
                    loadUrl: $linkOldJIS,
                    insertUrl: $linkOldJIS,
                    updateUrl: $linkOldJIS,
                    deleteUrl: $linkOldJIS
                });
            }

            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {

                e.setValue(args.value);
                defaultValueChangeHandler(args);

                $("#temp_old_jis").val(args.value);
                //e.component.cellValue(0, "price_sim_old_JIS", args.value);

                var selectedRowIndex = e.component.getRowIndexByKey(e.row.key);
                var $link = '@Html.Raw(Url.Action("ListPartNumber", "api", new {newjis = "replacenew", oldjis = "replaceold" }))';
                $link = $link.replace("replacenew", encodeURIComponent($("#temp_new_jis").val()));
                $link = $link.replace("replaceold", encodeURIComponent($("#temp_old_jis").val()));

                $.ajax({
                    type: "GET",
                    url: $link,
                    beforeSend: function () {

                    },
                    success: function (response) {
                        if (response != null) {
                            if (!response.toString().includes("not found")) {
                                if (response.data.length > 0) {
                                    var loadData = response.data[0];

                                    if (loadData != null) {
                                        qtyL = loadData.PN_qty_L_pallet;
                                        qtyS = loadData.PN_qty_S_pallet;
                                        var partnum = loadData.part_number;
                                        var catbatt = loadData.PN_category_batt;
                                        var battseg = loadData.PN_batt_segmentation;
                                        var battweig;
                                        if (loadData.PN_dry_weight != null) {
                                            battweig = loadData.PN_dry_weight;
                                        } else {
                                            battweig = loadData.PN_wet_weight;
                                        }

                                        e.component.cellValue(selectedRowIndex, "price_sim_PN", partnum);
                                        e.component.cellValue(selectedRowIndex, "price_sim_batt_segmentation", battseg);
                                        e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_L", qtyL);
                                        e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_S", qtyS);
                                        e.component.cellValue(selectedRowIndex, "price_sim_batt_weight", battweig);

                                    }
                                } else {
                                    DevExpress.ui.notify(response.toString(), "warning", 3000);
                                }
                            } else {
                                DevExpress.ui.notify(response.toString(), "warning", 3000);
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        DevExpress.ui.notify(error, "warning", 3000);
                    }
                });
            }
        }

        if (e.parentType == "dataRow" && e.dataField == "price_sim_request_qty" && e.caption == "Request Qty") {
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {

                e.setValue(args.value);
                defaultValueChangeHandler(args);

                $("#temp_req_qty").val(args.value);

                var selectedRowIndex = e.component.getRowIndexByKey(e.row.key);
                var $link = '@Html.Raw(Url.Action("PriceSimulation", "api", new { req_qty = "replacereq", PN = "replacePN", L_pallet = "replaceL", S_pallet = "replaceS" }))';
                $link = $link.replace("replacereq", encodeURIComponent($("#temp_req_qty").val()));

                $link = $link.replace("replacePN", encodeURIComponent(e.component.cellValue(selectedRowIndex, "price_sim_PN")));
                $link = $link.replace("replaceL", encodeURIComponent(e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_L")));
                $link = $link.replace("replaceS", encodeURIComponent(e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_S")));

                $.ajax({
                    type: "GET",
                    url: $link,
                    beforeSend: function () {

                    },
                    success: function (response) {
                        //console.log(response)
                        if (response != null) {
                            var loadData = response.split("||");

                            e.component.cellValue(selectedRowIndex, "price_sim_adjust_qty", loadData[0]);
                            e.component.cellValue(selectedRowIndex, "price_sim_total_pallet_L", loadData[1]);
                            e.component.cellValue(selectedRowIndex, "price_sim_total_pallet_S", loadData[2]);
                            e.component.cellValue(selectedRowIndex, "price_sim_unit_price", loadData[3]);
                            e.component.cellValue(selectedRowIndex, "price_sim_amount", loadData[0] * loadData[3]);
                            var total_batt_wei = loadData[0] * e.component.cellValue(selectedRowIndex, "price_sim_batt_weight");
                            e.component.cellValue(selectedRowIndex, "price_sim_total_batt_weight", total_batt_wei.toFixed(3));
                        }
                    },
                    error: function (xhr, status, error) {
                    }
                });
            }
        }


        if (e.parentType == "dataRow" && e.dataField == "price_sim_total_pallet_L" && e.caption == "L") {
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {
                e.setValue(args.value);
                defaultValueChangeHandler(args);

                var selectedRowIndex = e.component.getRowIndexByKey(e.row.key);
                var palletL = args.value;
                var palletS = e.component.cellValue(selectedRowIndex, "price_sim_total_pallet_S");
                var qtyL = e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_L");
                var qtyS = e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_S");
                var adjust_qty = (palletL * qtyL) + (palletS * qtyS);
                //$("#temp_new_jis").val(args.value);
                e.component.cellValue(selectedRowIndex, "price_sim_adjust_qty", adjust_qty);
                e.component.cellValue(selectedRowIndex, "price_sim_amount", adjust_qty * e.component.cellValue(selectedRowIndex, "price_sim_unit_price"));
                var total_batt_wei = adjust_qty * e.component.cellValue(selectedRowIndex, "price_sim_batt_weight");
                e.component.cellValue(selectedRowIndex, "price_sim_total_batt_weight", total_batt_wei.toFixed(3));
            }

        }

        if (e.parentType == "dataRow" && e.dataField == "price_sim_total_pallet_S" && e.caption == "S") {
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {
                e.setValue(args.value);
                defaultValueChangeHandler(args);

                var selectedRowIndex = e.component.getRowIndexByKey(e.row.key);
                var palletS = args.value;
                var palletL = e.component.cellValue(selectedRowIndex, "price_sim_total_pallet_L");
                var qtyL = e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_L");
                var qtyS = e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_S");
                var adjust_qty = (palletL * qtyL) + (palletS * qtyS);
                //$("#temp_new_jis").val(args.value);
                e.component.cellValue(selectedRowIndex, "price_sim_adjust_qty", adjust_qty);
                e.component.cellValue(selectedRowIndex, "price_sim_amount", adjust_qty * e.component.cellValue(selectedRowIndex, "price_sim_unit_price"));
                var total_batt_wei = adjust_qty * e.component.cellValue(selectedRowIndex, "price_sim_batt_weight");
                e.component.cellValue(selectedRowIndex, "price_sim_total_batt_weight", total_batt_wei.toFixed(3));
            }
        }
    }

    function filterData(data) {
        if ($("#temp_batt_segment").val() == data.PN_batt_segmentation) return data;
    }

    function OnEditorPreparingDataGrid(e) {

        var qtyL;
        var qtyS;

        if (e.parentType == "dataRow" && e.dataField == "price_sim_new_JIS" && e.caption == "NEW JIS") {
            e.editorOptions.disabled = (typeof e.row.data.price_sim_batt_segmentation !== "string");
            console.log(e);

            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {
                e.setValue(args.value);
                defaultValueChangeHandler(args);
                $("#temp_new_jis").val(args.value);
            }
        }

        if (e.parentType == "dataRow" && e.dataField == "price_sim_old_JIS" && e.caption == "OLD JIS") {
            e.editorOptions.disabled = (typeof e.row.data.price_sim_new_JIS !== "string");

            //console.log("old_jis_event");
            if ($("#temp_new_jis").val() != null && $("#temp_new_jis").val() != "") {
                var $linkOldJIS = '@Html.Raw(Url.Action("list-old-jis", "api", new {jis = "replaceroomid"}))';
                $linkOldJIS = $linkOldJIS.replace("replaceroomid", encodeURIComponent($("#temp_new_jis").val()));
                e.editorOptions.dataSource = DevExpress.data.AspNet.createStore({
                    key: "PN_old_jis",
                    loadUrl: $linkOldJIS,
                    insertUrl: $linkOldJIS,
                    updateUrl: $linkOldJIS,
                    deleteUrl: $linkOldJIS
                });
            }

            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {

                e.setValue(args.value);
                defaultValueChangeHandler(args);

                $("#temp_old_jis").val(args.value);
                //e.component.cellValue(0, "price_sim_old_JIS", args.value);

                var selectedRowIndex = e.component.getRowIndexByKey(e.row.key);
                var $link = '@Html.Raw(Url.Action("ListPartNumber", "api", new {newjis = "replacenew", oldjis = "replaceold", battseg = "replacebat" }))';
                $link = $link.replace("replacenew", encodeURIComponent($("#temp_new_jis").val()));
                $link = $link.replace("replaceold", encodeURIComponent($("#temp_old_jis").val()));
                $link = $link.replace("replacebat", encodeURIComponent(e.row.data.price_sim_batt_segmentation));

                $.ajax({
                    type: "GET",
                    url: $link,
                    beforeSend: function () {

                    },
                    success: function (response) {
                        if (response != null) {
                            if (!response.toString().includes("not found")) {
                                if (response.data.length > 0) {
                                    var loadData = response.data[0];

                                    if (loadData != null) {
                                        qtyL = loadData.PN_qty_L_pallet;
                                        qtyS = loadData.PN_qty_S_pallet;
                                        var partnum = loadData.part_number;
                                        var catbatt = loadData.PN_category_batt;
                                        var battseg = loadData.PN_batt_segmentation;
                                        var battweig;
                                        if (loadData.PN_dry_weight != null) {
                                            battweig = loadData.PN_dry_weight;
                                        } else {
                                            battweig = loadData.PN_wet_weight;
                                        }

                                        //instanceSelectedNewJIS.option("columns[3].value", battseg);
                                        //instanceSelectedNewJIS.option("columns[5].columns[0].value", qtyL);
                                        //instanceSelectedNewJIS.option("columns[5].columns[1].value", qtyS);

                                        e.component.cellValue(selectedRowIndex, "price_sim_PN", partnum);
                                        e.component.cellValue(selectedRowIndex, "price_sim_batt_segmentation", battseg);
                                        e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_L", qtyL);
                                        e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_S", qtyS);
                                        e.component.cellValue(selectedRowIndex, "price_sim_batt_weight", battweig);

                                        //console.log(e.component.cellValue(0, "price_sim_qty_pallet_S"));
                                    }
                                } else {
                                    DevExpress.ui.notify(response.toString(), "warning", 3000);
                                }
                            } else {
                                DevExpress.ui.notify(response.toString(), "warning", 3000);
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        DevExpress.ui.notify(error, "warning", 3000);
                    }
                });
            }

            //e.id = "price_sim_old_JIS";
            //console.log(e);
        }

        if (e.parentType == "dataRow" && e.dataField == "price_sim_request_qty" && e.caption == "Request Qty") {
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {

                e.setValue(args.value);
                defaultValueChangeHandler(args);

                $("#temp_req_qty").val(args.value);

                var selectedRowIndex = e.component.getRowIndexByKey(e.row.key);
                var $link = '@Html.Raw(Url.Action("PriceSimulation", "api", new { req_qty = "replacereq", PN = "replacePN", L_pallet = "replaceL", S_pallet = "replaceS" }))';
                $link = $link.replace("replacereq", encodeURIComponent($("#temp_req_qty").val()));

                $link = $link.replace("replacePN", encodeURIComponent(e.component.cellValue(selectedRowIndex, "price_sim_PN")));
                $link = $link.replace("replaceL", encodeURIComponent(e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_L")));
                $link = $link.replace("replaceS", encodeURIComponent(e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_S")));

                $.ajax({
                    type: "GET",
                    url: $link,
                    beforeSend: function () {

                    },
                    success: function (response) {
                        //console.log(response)
                        if (response != null) {
                            var loadData = response.split("||");

                            e.component.cellValue(selectedRowIndex, "price_sim_adjust_qty", loadData[0]);
                            e.component.cellValue(selectedRowIndex, "price_sim_total_pallet_L", loadData[1]);
                            e.component.cellValue(selectedRowIndex, "price_sim_total_pallet_S", loadData[2]);
                            e.component.cellValue(selectedRowIndex, "price_sim_unit_price", loadData[3]);
                            e.component.cellValue(selectedRowIndex, "price_sim_amount", loadData[0] * loadData[3]);
                            var total_batt_wei = loadData[0] * e.component.cellValue(selectedRowIndex, "price_sim_batt_weight");
                            e.component.cellValue(selectedRowIndex, "price_sim_total_batt_weight", total_batt_wei.toFixed(3));
                            //console.log(loadData[0] + "*" + e.component.cellValue(0, "price_sim_batt_weight"));

                            //
                            //if (response.data.length > 0) {

                                //var loadData = response.data[0];

                                //if (loadData != null) {
                                //    var qtyL = loadData.PN_qty_L_pallet;
                                //    var qtyS = loadData.PN_qty_S_pallet;
                                //    var catbatt = loadData.PN_category_batt;
                                //    var battseg = loadData.PN_batt_segmentation;

                                //    instanceSelectedNewJIS.option("columns[3].value", battseg);
                                //    instanceSelectedNewJIS.option("columns[5].columns[0].value", qtyL);
                                //    instanceSelectedNewJIS.option("columns[5].columns[1].value", qtyS);

                                //}
                            //}
                        }
                    },
                    error: function (xhr, status, error) {
                    }
                });
            }
        }


        if (e.parentType == "dataRow" && e.dataField == "price_sim_total_pallet_L" && e.caption == "L") {
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {
                e.setValue(args.value);
                defaultValueChangeHandler(args);

                var selectedRowIndex = e.component.getRowIndexByKey(e.row.key);
                var palletL = args.value;
                var palletS = e.component.cellValue(selectedRowIndex, "price_sim_total_pallet_S");
                var qtyL = e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_L");
                var qtyS = e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_S");
                var adjust_qty = (palletL * qtyL) + (palletS * qtyS);
                //$("#temp_new_jis").val(args.value);
                e.component.cellValue(selectedRowIndex, "price_sim_adjust_qty", adjust_qty);
                e.component.cellValue(selectedRowIndex, "price_sim_amount", adjust_qty * e.component.cellValue(selectedRowIndex, "price_sim_unit_price"));
                var total_batt_wei = adjust_qty * e.component.cellValue(selectedRowIndex, "price_sim_batt_weight");
                e.component.cellValue(selectedRowIndex, "price_sim_total_batt_weight", total_batt_wei.toFixed(3));
            }

        }

        if (e.parentType == "dataRow" && e.dataField == "price_sim_total_pallet_S" && e.caption == "S") {
            //console.log("edit masuk");
            ////console.log(e.selectedRowKeys[0]);
            //console.log(selectedRowIndex);
            //console.log(e);
            //console.log(e.component);
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = async function (args) {
                e.setValue(args.value);
                defaultValueChangeHandler(args);

                var selectedRowIndex = e.component.getRowIndexByKey(e.row.key);
                var palletS = args.value;
                var palletL = e.component.cellValue(selectedRowIndex, "price_sim_total_pallet_L");
                var qtyL = e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_L");
                var qtyS = e.component.cellValue(selectedRowIndex, "price_sim_qty_pallet_S");
                var adjust_qty = (palletL * qtyL) + (palletS * qtyS);
                //$("#temp_new_jis").val(args.value);
                e.component.cellValue(selectedRowIndex, "price_sim_adjust_qty", adjust_qty);
                e.component.cellValue(selectedRowIndex, "price_sim_amount", adjust_qty * e.component.cellValue(selectedRowIndex, "price_sim_unit_price"));
                var total_batt_wei = adjust_qty * e.component.cellValue(selectedRowIndex, "price_sim_batt_weight");
                e.component.cellValue(selectedRowIndex, "price_sim_total_batt_weight", total_batt_wei.toFixed(3));
            }
        }
    }

    function approvalPopUp(e) {
        $("#temp_id").val(encodeURIComponent(e.row.key));
        console.log(e.row.key);
        console.log($("#temp_id").val());
        let dataPopUp = document.getElementById("approval-popup");
        let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
        popup.show();
    }

    function clickPopup() {
        var $link = '@Html.Raw(Url.Action("PriceSimulation", "api", new { CustID = "replaceCustID", flag = "replaceflag" }))';
            $link = $link.replace("replaceCustID", $("#custid").val());
            $link = $link.replace("replaceflag", true);


            $.ajax({
                type: "GET",
                url: $link,
                beforeSend: function () {

                },
                success: function (response) {
                    //console.log(response);
                    if (response != null) {
                        $("#lbl_id").html(response.toUpperCase());

                        //let labelid = document.getElementById("lbl_id");
                        ////let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
                        ////instanceDataGrid.option('dataSource', response.data);
                        ////instanceDataGrid.refresh();

                        //instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                        //    key: "id_order",
                        //    loadUrl: $link,
                        //    insertUrl: $link,
                        //    updateUrl: $link,
                        //    deleteUrl: $link
                        //}));

                        //instanceDataGrid.refresh();
                    }
                },
                error: function (xhr, status, error) {
                }
            });


        let dataPopUp = document.getElementById("insert-popup");
        let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
        popup.show();
    }

    function OnContentReady_Detail(cellElement) {
        //console.log(cellElement);
    }

    function functionBtnFinish(e) {
        console.log($("#temp_id").val());
            var $link = '@Html.Raw(Url.Action("PriceSimulation/finish-price", "api", new {
                priceID = "replaceID"
            }))';
        $link = $link.replace("replaceID", encodeURIComponent($("#temp_id").val()));
        //$link = $link.replace("replaceID", encodeURIComponent(e.row.key));

        $.ajax({
            type: "GET",
            url: $link,
            beforeSend: function () {
            },
            success: function (response) {
                DevExpress.ui.notify("Data has been successfully closed!", "success", 1500);

                let dataPopUp = document.getElementById("finish-popup");
                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                popup.hide();

                let dataGrid = document.getElementById("gridContainer");
                let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);

                instanceDataGrid.refresh();
            },
            error: function (xhr, status, error) {
            }
        });

    }

    function functionBtnSubmit(e) {
        console.log($("#temp_id").val());
            var $link = '@Html.Raw(Url.Action("PriceSimulation/submit-price", "api", new {
                priceID = "replaceID"
            }))';
        $link = $link.replace("replaceID", encodeURIComponent($("#temp_id").val()));
        //$link = $link.replace("replaceID", encodeURIComponent(e.row.key));

        $.ajax({
            type: "GET",
            url: $link,
            beforeSend: function () {
            },
            success: function (response) {
                DevExpress.ui.notify("Data has been successfully submitted!", "success", 1500);

                let dataPopUp = document.getElementById("submit-popup");
                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                popup.hide();

                let dataGrid = document.getElementById("gridContainer");
                let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);

                instanceDataGrid.refresh();
            },
            error: function (xhr, status, error) {
            }
        });

    }

    function functionBtnApprove(e) {
        console.log($("#temp_id").val());
            var $link = '@Html.Raw(Url.Action("PriceSimulation/approve-price", "api", new {
                priceID = "replaceID"
            }))';
        $link = $link.replace("replaceID", encodeURIComponent($("#temp_id").val()));
        //$link = $link.replace("replaceID", encodeURIComponent(e.row.key));

        $.ajax({
            type: "GET",
            url: $link,
            beforeSend: function () {
            },
            success: function (response) {
                DevExpress.ui.notify("Data has been successfully approved!", "success", 1500);

                let dataPopUp = document.getElementById("approval-popup");
                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                popup.hide();

                let dataGrid = document.getElementById("gridContainer");
                let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);

                instanceDataGrid.refresh();
            },
            error: function (xhr, status, error) {
            }
        });

    }

    function functionBtnSave() {
        console.log($("#lbl_id").html());
            var $link = '@Html.Raw(Url.Action("Post_Header", "PriceSimulation", new {
                    labelID = "replaceID"
                }))';
        $link = $link.replace("replaceID", encodeURIComponent($("#lbl_id").html()));

        $.ajax({
            type: "GET",
            url: $link,
            beforeSend: function () {
            },
            success: function (response) {
                DevExpress.ui.notify("Data success created!", "success", 1500);
            },
            error: function (xhr, status, error) {
            }
        });

        var $link = '@Html.Raw(Url.Action("PriceSimulation", "api", new { labelID = "replacelabelID" }))';
        $link = $link.replace("replacelabelID", encodeURIComponent($("#lbl_id").html()));

                $.ajax({
                    type: "GET",
                    url: $link,
                    beforeSend: function () {

                    },
                    success: function (response) {
                        //console.log(response.data);
                        if (response != null) {

                            DevExpress.ui.notify("Data created successfully!", "success", 1500);

                            let dataPopUp = document.getElementById("insert-popup");
                            let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                            popup.hide();

                            let dataGrid = document.getElementById("gridContainer");
                            let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);

                            ////instanceDataGrid.option('dataSource', response.data);
                            ////instanceDataGrid.refresh();

                            //instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                            //    key: "id_order",
                            //    loadUrl: $link,
                            //    insertUrl: $link,
                            //    updateUrl: $link,
                            //    deleteUrl: $link
                            //}));

                            instanceDataGrid.refresh();
                        }
                    },
                    error: function (xhr, status, error) {
                    }
                });
    }

    function functionSendEmailToPPC(e) {
        if (e.row.key != null && e.row.key != "") {
            var $link = '@Html.Raw(Url.Action("SendEmail", "Manage", new {
                    emailTo = "replaceEmail",
                    messagesubject = "replaceSubject",
                    messageTitle = "replaceTitle",
                    messageBody = "replaceBody",
                    messageURL = "replaceURL"
                }))';
            $link = $link.replace("replaceEmail", encodeURIComponent("fauzi.milad@gs.astra.co.id"));
            $link = $link.replace("replaceSubject", encodeURIComponent("New Order From Marketing Division : " + e.row.key));
            $link = $link.replace("replaceTitle", encodeURIComponent("New Order has been released by Marketing Division!"));
            $link = $link.replace("replaceBody", encodeURIComponent(e.row.key));
            $link = $link.replace("replaceURL", encodeURIComponent("https://gs-order.gs.astra.co.id"));

        $.ajax({
            type: "POST",
            url: $link,
            beforeSend: function () {
            },
            success: function (response) {
                DevExpress.ui.notify("Email Sent !", "success", 1500);
            },
            error: function (xhr, status, error) {
            }
        });
        }

    }

    function functionSubmitPriceByID(e) {
    }

    function functionDownloadOrderByID(e) {
        var $link = '@Html.Raw(Url.Action("DownloadFromOrderBy_ID", "UploadFile", new { ID_ORDER = "replaceID" }))';
        $link = $link.replace("replaceID", encodeURIComponent(e.row.key));
        window.location.href = $link;
    }

        function exporting(e) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('Order');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Download-Order.xlsx');
                });
            });
            e.cancel = true;
        }

    function submitPopUpJS(data) {
        console.log(data);
        $("#temp_id").val(data.price_sim_id);
        //console.log(e.row.key);
        console.log($("#temp_id").val());
        let dataPopUp = document.getElementById("submit-popup");
        let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
        popup.show();
    }
    function finishPopUpJS(data) {
        console.log(data);
        $("#temp_id").val(data.price_sim_id);
        //console.log(e.row.key);
        console.log($("#temp_id").val());
        let dataPopUp = document.getElementById("finish-popup");
        let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
        popup.show();
    }
    function approvalPopUpJS(data) {
        console.log(data);
        $("#temp_id").val(data.price_sim_id);
        //console.log(e.row.key);
        console.log($("#temp_id").val());
        let dataPopUp = document.getElementById("approval-popup");
        let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
        popup.show();
    }

    function functionShowPopupDeleteJS(data) {
        console.log(data);
        if (data != null) {
            $("#temp_id").val(data.price_sim_id);

            let dataPopUp = document.getElementById("detail-popup");
            let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
            popup.show();
        }
    }

        function functionShowPopupDelete(e) {
            if (e.row.data != null) {
                $("#temp_id").val(e.row.data.id_order);

                let dataPopUp = document.getElementById("detail-popup");
                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                popup.show();
            }
        }

        function functionBtnDeleteHeader() {
            var id_order = "";
            id_order = $("#temp_id").val()

            if (id_order != null) {

                var $link = '@Html.Raw(Url.Action("PriceSimulation", "api", new { price_id = "replaceID" }))';
                $link = $link.replace("replaceID", encodeURIComponent(id_order));
            $.ajax({
                type: "DELETE",
                url: $link,
                beforeSend: function () {
                },
                success: function (response) {
                    if (response == 200) {
                        //DevExpress.ui.dialog.alert("Successfully deleted data!", "Information");
                        DevExpress.ui.notify("Successfully deleted data!", "success", 600);
                        //DevExpress.ui.notify("Successfully deleted data!", "warning", 600);
                        refreshTableDevJS();
                    } else {
                        //DevExpress.ui.dialog.alert("Failed delete data!", "Information");
                        DevExpress.ui.notify("Failed delete data!", "error", 600);
                        refreshTableDevJS();
                    }

                    let dataPopUp = document.getElementById("detail-popup");
                    let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
                    popup.hide();
                },
                error: function (xhr, status, error) {
                }
            });

            }
        }

        function refreshTableDevJS() {
            let dataGrid = document.getElementById("gridContainer");
             let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
             var $link = '@Html.Raw(Url.Action("PriceSimulation", "api"))';
             @*var $link = '@Html.Raw(Url.Action("PriceSimulation", "api", new { dateFrom = "replacedateFrom", dateTo = "replacedateTo" }))';*@
             //   $link = $link.replace("replacedateFrom", encodeURIComponent(valueDateFrom));
             //   $link = $link.replace("replacedateTo", encodeURIComponent(valueDateTo));

             instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                 key: "price_sim_id",
                 loadUrl: $link,
                 insertUrl: $link,
                 updateUrl: $link,
                 deleteUrl: $link
             }));

             instanceDataGrid.refresh();
        }

    var dataGrid;
    function setComponent(e) {
        dataGrid = e.component;
    }

    function cell_numbering(cellElement, cellInfo) {

        var index = dataGrid.pageIndex() * dataGrid.pageSize() + cellInfo.rowIndex + 1;
        cellElement.text(index);

    }

    function countTotal(data, e) {
        //console.log(e);
        //console.log(data);
        return data.value;
    }

        function customSummary(data) {
            return "Total: ";
        }

        function customSummaryTotal(data) {
            return data.value.toFixed(3);
        }

        function switch_valueChanged(data) {
            if (data.value) {
                $("#orderid").val("");
                $("#option-order-id").hide();
            } else {
                $("#option-order-id").show();
                $("#orderid").val("");
            }
        }

        function refreshTableDevExpress() {
            let dateBoxFrom = document.getElementById("date-from");
            let instanceDateBoxFrom = DevExpress.ui.dxDateBox.getInstance(dateBoxFrom);
            var valueDateFrom = instanceDateBoxFrom.option("value");

            let dateBoxTo = document.getElementById("date-to");
            let instanceDateBoxTo = DevExpress.ui.dxDateBox.getInstance(dateBoxTo);
            var valueDateTo = instanceDateBoxTo.option("value");

            if (valueDateFrom != "" && valueDateTo != "") {
                let dataGrid = document.getElementById("gridContainer");
             let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
             var $link = '@Html.Raw(Url.Action("Order", "api", new { dateFrom = "replacedateFrom", dateTo = "replacedateTo" }))';
                $link = $link.replace("replacedateFrom", encodeURIComponent(valueDateFrom));
                $link = $link.replace("replacedateTo", encodeURIComponent(valueDateTo));

             instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                 key: "id_order",
                 loadUrl: $link,
                 insertUrl: $link,
                 updateUrl: $link,
                 deleteUrl: $link
             }));

             instanceDataGrid.refresh();
            }
        }

        function onchangeStatusOrder() {
            if ($("#statusorder").val() != "") {
                //if ($("#statusorder").val() != 3 && $("#statusorder").val() != 4) {
                //    $("#option-po").show();
                //    $("#option-so").hide();
                //    $("#pono").prop('disabled', false);
                //    $("#sono").prop('disabled', true);
                //} else {
                //    $("#option-po").show();
                //    $("#option-so").show();
                //    $("#pono").prop('disabled', false);
                //    $("#sono").prop('disabled', false);
                //}

            } else {
                alert("Status Order masih kosong!. Harap untuk pilih dan lanjutkan Upload.");
            }
        }

        function closeModalUpload() {
            $("#selected-files").html("");
            $("#selected-files .selected-item").remove();
            $("#statusorder").val("");
            let dataGrid = document.getElementById("file-uploader");
            let instanceDataGrid = DevExpress.ui.dxFileUploader.getInstance(dataGrid);
            instanceDataGrid.reset();
    }


        function onChangeDateFrom() {
            let dateBoxFrom = document.getElementById("date-from");
            let instanceDateBoxFrom = DevExpress.ui.dxDateBox.getInstance(dateBoxFrom);
            var valueDateFrom = instanceDateBoxFrom.option("value");

            let dateBoxTo = document.getElementById("date-to");
            let instanceDateBoxTo = DevExpress.ui.dxDateBox.getInstance(dateBoxTo);
            var valueDateTo = instanceDateBoxTo.option("value");

            if (valueDateFrom != "" && valueDateTo != "") {

                //var $link = "http://localhost:56223/api/order?dateFrom=" + $("#date-from").val() + "&dateTo=" + $("#date-to").val();
                var $link = '@Html.Raw(Url.Action("Order", "api", new { dateFrom = "replacedateFrom", dateTo = "replacedateTo" }))';
                $link = $link.replace("replacedateFrom", encodeURIComponent(valueDateFrom));
                $link = $link.replace("replacedateTo", encodeURIComponent(valueDateTo));

                $.ajax({
                    type: "GET",
                    url: $link,
                    beforeSend: function () {

                    },
                    success: function (response) {
                        //console.log(response.data);
                        if (response != null) {

                            let dataGrid = document.getElementById("gridContainer");
                            let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
                            //instanceDataGrid.option('dataSource', response.data);
                            //instanceDataGrid.refresh();

                            instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                                key: "id_order",
                                loadUrl: $link,
                                insertUrl: $link,
                                updateUrl: $link,
                                deleteUrl: $link
                            }));

                            instanceDataGrid.refresh();
                        }
                    },
                    error: function (xhr, status, error) {
                    }
                });
            }
        }

        function onChangeDateTo() {
            let dateBoxFrom = document.getElementById("date-from");
            let instanceDateBoxFrom = DevExpress.ui.dxDateBox.getInstance(dateBoxFrom);
            var valueDateFrom = instanceDateBoxFrom.option("value");

            let dateBoxTo = document.getElementById("date-to");
            let instanceDateBoxTo = DevExpress.ui.dxDateBox.getInstance(dateBoxTo);
            var valueDateTo = instanceDateBoxTo.option("value");

            if (valueDateFrom != "") {

                //var $link = "http://localhost:56223/api/order?dateFrom=" + $("#date-from").val() + "&dateTo=" + $("#date-to").val();
                var $link = '@Html.Raw(Url.Action("Order", "api", new { dateFrom = "replacedateFrom", dateTo = "replacedateTo" }))';
                $link = $link.replace("replacedateFrom", encodeURIComponent(valueDateFrom));
                $link = $link.replace("replacedateTo", encodeURIComponent(valueDateTo));

                $.ajax({
                    type: "GET",
                    url: $link,
                    beforeSend: function () {

                    },
                    success: function (response) {
                        //console.log(response.data);
                        if (response != null) {

                            let dataGrid = document.getElementById("gridContainer");
                            let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
                            //instanceDataGrid.option('dataSource', response.data);
                            //instanceDataGrid.refresh();

                            instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                                key: "id_order",
                                loadUrl: $link,
                                insertUrl: $link,
                                updateUrl: $link,
                                deleteUrl: $link
                            }));

                            instanceDataGrid.refresh();
                        }
                    },
                    error: function (xhr, status, error) {
                    }
                });



            } else {
                alert("Tanggal masih kosong");
            }
        }

        function getFileUploaderInstance() {
            return $("#file-uploader").dxFileUploader("instance");
        }

    function check_beforeupload(e) {
            let selectTahun = document.getElementById("select-years");
            let instanceSelectedTahun = DevExpress.ui.dxSelectBox.getInstance(selectTahun);
            var valueTahun = instanceSelectedTahun.option("value");

            let selectBulan = document.getElementById("select-months");
            let instanceSelectedBulan = DevExpress.ui.dxSelectBox.getInstance(selectBulan);
            var valueBulan = instanceSelectedBulan.option("value");

            let dataDev = document.getElementById("baruorlama");
            let instanceDataDev = DevExpress.ui.dxSwitch.getInstance(dataDev);
            var statusOrder = instanceDataDev.option("value");

            if (valueTahun == null && valueBulan == null || valueTahun == "" && valueBulan == "") {
                e.request.abort();
                DevExpress.ui.dialog.alert("Mohon untuk mengisi Tahun dan Bulan terlebih dahulu.", "Informasi");
            } else if (valueTahun == null || valueTahun == "") {
                e.request.abort();
                DevExpress.ui.dialog.alert("Mohon untuk mengisi Tahun terlebih dahulu.", "Informasi");
            } else if (valueBulan == null || valueBulan == "") {
                e.request.abort();
                DevExpress.ui.dialog.alert("Mohon untuk mengisi Bulan terlebih dahulu.", "Informasi");
            } else if (!statusOrder && $("#orderid").val() == null || !statusOrder && $("#orderid").val() == "") {
                e.request.abort();
                DevExpress.ui.dialog.alert("Mohon untuk mengisi Order ID terlebih dahulu.", "Informasi");
            } else if ($("#statusorder").val() == null || $("#statusorder").val() == "") {
                e.request.abort();
                DevExpress.ui.dialog.alert("Mohon untuk mengisi Status Order terlebih dahulu.", "Informasi");
        }
        //console.log(e);
        }

    function onFilesUploaded(e) {
            //location.reload(true);
            //closeModalUpload();
            //refreshTableDevExpress();
            //$("#btn_close").click();
    }

    function onFilesUploadedDone(e) {
        //console.log(e);
        if (e.request != null) {
            if (e.request.response.includes("error")) {
                DevExpress.ui.dialog.alert(e.request.responseText, "Informasi");
            } else {
                DevExpress.ui.dialog.alert("Proses Upload Selesai", "Informasi");
                location.reload(true);
            }
        }
    }

        function fileUploader_valueChanged(e) {
            let selectTahun = document.getElementById("select-years");
            let instanceSelectedTahun = DevExpress.ui.dxSelectBox.getInstance(selectTahun);
            var valueTahun = instanceSelectedTahun.option("value");

            let selectBulan = document.getElementById("select-months");
            let instanceSelectedBulan = DevExpress.ui.dxSelectBox.getInstance(selectBulan);
            var valueBulan = instanceSelectedBulan.option("value");

            //console.log(e);
            //console.log(valueBulan);
            //console.log(valueTahun);
            //console.log($("#statusorder").val());

            if (valueTahun == null) {
                return;
            }

            if (valueBulan == null) {
                return;
            }

            //let dataDev = document.getElementById("baruorlama");
            //let instanceDataDev = DevExpress.ui.dxSwitch.getInstance(dataDev);
            //var statusOrder = instanceDataDev.option("value");
            //if (statusOrder == null) {
            //    return;
            //}

            //if ($("#orderid").val() == null || $("#orderid").val() == "") {
            //    return;
            //}

            if ($("#statusorder").val() == null || $("#statusorder").val() == "") {
                return;
            }


            //if (!statusOrder && $("#orderid").val() == null || !statusOrder && $("#orderid").val() == "") {
            //    alert("Mohon untuk mengisi Order ID Tujuan.");
            //    //return;
            //    setTimeout(() => {
            //        location.reload(true);
            //    }, 1000);
            //}
            //alert($("#statusorder").val() + e.value);

            if (valueBulan != null && valueTahun != null && $("#statusorder").val() != null) {
                var files = e.value;
                if (files.length > 0) {
                    $("#selected-files .selected-item").remove();

                    //var urlBase = updateQueryStringParameter("UploadFile/UploadExcelOrder?");
                    //console.log(urlBase);
                    var urlBase = updateQueryStringParameter(e.component.option("uploadUrl"), "status", $("#statusorder").val());
                    //console.log(urlBase);
                    urlBase = updateQueryStringParameter(urlBase, "orderid", $("#orderid").val());
                    //console.log(urlBase);
                    urlBase = updateQueryStringParameter(urlBase, "tahun", valueTahun);
                   //console.log(urlBase);
                    urlBase = updateQueryStringParameter(urlBase, "bulan", valueBulan);
                    //console.log(urlBase);
                    //console.log("========================");
                    //console.log(urlBase);
                    //urlBase = updateQueryStringParameter(urlBase, "po", $("#pono").val());
                    //urlBase = updateQueryStringParameter(urlBase, "status", $("#statusorder").val());
                    e.component.option("uploadUrl", urlBase);
                    //alert(e.component.option("uploadUrl"));


                    $.each(files, function (i, file) {
                        var $selectedItem = $("<div />").addClass("selected-item");
                        $selectedItem.append(
                            $("<span />").html("Name: " + file.name + "<br/>"),
                            $("<span />").html("Size " + file.size + " bytes" + "<br/>"),
                            $("<span />").html("Type " + file.type + "<br/>"),
                            $("<span />").html("Last Modified Date: " + file.lastModifiedDate)
                        );
                        $selectedItem.appendTo($("#selected-files"));
                    });
                    $("#selected-files").show();
                }
                else
                    $("#selected-files").hide();

            }
        }

        function updateQueryStringParameter(uri, key, value) {
            var re = new RegExp("[?&]" + key + "=.*?(&|$)", "i");
            var separator = uri.indexOf('?') !== -1 ? "&" : "?";
            if (uri.match(re)) {
                return uri.replace(re, '$1' + key + "=" + value + '$2');
            } else {
                return uri + separator + key + "=" + value;
            }
        }


        function acceptOption_changed(e) {
            getFileUploaderInstance().option("accept", e.value);
        }

        function uploadMode_changed(e) {
            getFileUploaderInstance().option("uploadMode", e.value);
        }

        function multipleOption_changed(e) {
            getFileUploaderInstance().option("multiple", e.value);
        }

        let refreshButton;
        let uploadButton;
        let historyButton;

        function onToolbarPreparing(e) {
            var dataGrid = e.component;

            e.toolbarOptions.items[0].showText = 'always';
            e.toolbarOptions.items.push({
                location: "after",
                widget: "dxButton",
                options: {
                    text: "Add",
                    icon: "add",
                    disabled: false,
                    onClick: clickPopup,
                    onInitialized: function (e) {
                        refreshButton = e.component;
                    }
                }
            });

            //e.toolbarOptions.items[0].showText = 'always';
            //e.toolbarOptions.items.push({
            //    location: "after",
            //    widget: "dxButton",
            //    options: {
            //        text: "Upload Excel",
            //        icon: "upload",
            //        disabled: false,
            //        onClick: onUploadBtnClick,
            //        onInitialized: function (e) {
            //            uploadButton = e.component;
            //        }
            //    }
            //});

            //e.toolbarOptions.items[1].showText = 'always';
            //e.toolbarOptions.items.push({
            //    location: "after",
            //    widget: "dxButton",
            //    options: {
            //        text: "Refresh",
            //        icon: "refresh",
            //        disabled: false,
            //        onClick: onRefreshBtnClick,
            //        onInitialized: function (e) {
            //            refreshButton = e.component;
            //        }
            //    }
            //});

            //e.toolbarOptions.items[2].showText = 'always';
            //e.toolbarOptions.items.push({
            //    location: "after",
            //    widget: "dxButton",
            //    options: {
            //        text: "History",
            //        icon: "detailslayout",
            //        disabled: false,
            //        onClick: onPopUpHistoryBtnClick,
            //        onInitialized: function (e) {
            //            historyButton = e.component;
            //        }
            //    }
            //});
        }


        function onPopUpHistoryBtnClick() {
            //LOAD MODAL
            let dataPopUp = document.getElementById("detail-history");
            let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
            popup.show();

            var $link = '@Html.Raw(Url.Action("HistoryTransaction", "api"))';

            let dataGrid = document.getElementById("gridContainerHistory");
            let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
            instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                key: "id_recnum_history",
                loadUrl: $link
            }));
            instanceDataGrid.refresh();
    }


     function onPopUpHistoryUploadOrderBtnClick() {
            //LOAD MODAL
            let dataPopUp = document.getElementById("log-history-upload-order");
            let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
            popup.show();

            var $link = '@Html.Raw(Url.Action("HistoryTransaction", "api"))';

            let dataGrid = document.getElementById("gridContainerHistoryUploadOrder");
            let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
            instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                key: "id_recnum_history",
                loadUrl: $link
            }));
            instanceDataGrid.refresh();
        }


        function onUploadBtnClick() {
            document.getElementById("btn-modal-show").click();
    }

    function RepaintDataGrid() {
        let dataGrid = document.getElementById("popuptemp");
        let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);

        //instanceDataGrid.refresh();
        instanceDataGrid.repaint();
    }

    function RefreshDataGrid() {
        let dataGrid = document.getElementById("popuptemp");
        let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);

        //instanceDataGrid.refresh();
        instanceDataGrid.repaint();
    }

        function onRefreshBtnClick() {
            //onChangeDateTo();
            //location.reload(true);
            refreshTableDevExpress();
        }

        function onSelectionChanged(data) {
            //refreshButton.option("disabled", !data.selectedRowsData.length);
        }
</script>

}