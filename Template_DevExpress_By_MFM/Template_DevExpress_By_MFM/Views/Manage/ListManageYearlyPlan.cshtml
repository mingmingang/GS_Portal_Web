@using Template_DevExpress_By_MFM.Models
@{
    ViewBag.Title = "Manage Yearly Plan";
}


<!-- Left Sidebar End -->
<!-- ============================================================== -->
<!-- Start right Content here -->
<!-- ============================================================== -->
<!-- Start content -->
<style>
    .widget-container {
        margin-right: 320px;
    }

    .content h4 {
        margin-bottom: 10px;
        font-weight: 500;
        font-size: 18px;
    }

    .content {
        margin-top: 50px;
        margin-left: 10px;
    }

    .selected-item {
        margin-bottom: 20px;
    }

    #selected-files {
        display: none;
    }

    .options {
        padding: 20px;
        background-color: rgba(191, 191, 191, 0.15);
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: 260px;
    }

    .caption {
        font-size: 18px;
        font-weight: 500;
    }

    .option {
        margin-top: 10px;
    }

    .dx-datagrid-rowsview .column_class {
        text-align: left !important;
    }
</style>


<div class="content">
    <div class="container-fluid" style="padding-bottom:-300px;">
        <div class="page-title-box">
            <div class="row align-items-center">
                <div class="col-sm-4">
                    <h4 class="page-title">Manage Yearly Plan</h4>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="javascript:void(0);">Manage</a></li>
                        <li class="breadcrumb-item" active><a href="javascript:void(0);">Manage Yearly Plan</a></li>
                    </ol>

                </div>
                <div class="col-sm-8">
                    @*<div class="float-right d-none d-md-block" style="padding-left:20px;">
                            <label for="example-date-input" class="col-form-label">Date From</label>
                            <div>
                                <input class="form-control" type="date" value="2021-08-01" id="example-date-input">
                            </div>
                        </div>
                        <div class="float-right d-none d-md-block" style="padding-right:0px;">
                            <label for="example-date-input" class="col-form-label">Date To</label>
                            <div>
                                <input class="form-control" type="date" value="2021-08-01" id="example-date-input">
                            </div>
                        </div>*@
                    <div class="float-right d-none d-md-block" style="padding-right:20px;padding-top:30px;">
                        <button hidden id="btn-modal-show" class="btn btn-primary dropdown-toggle arrow-none waves-effect waves-light" type="button" data-toggle="modal" data-target=".modal-form-upload-file">
                            <i class="mdi mdi-file-upload mr-2"></i> Upload Excel
                        </button>
                    </div>

                    <!--  Modal content for the above example -->
                    <div class="modal fade modal-form-upload-file" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title mt-0" id="myLargeModalLabel">Form Upload Excel Yearly Plan</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                                </div>
                                <form class="">
                                    <div class="modal-body">
                                        <div class="card">
                                            <div class="card-body" style="overflow-y: scroll;height:350px; width:100%;">
                                                <div id="fileuploader">
                                                    <div class="widget-container">
                                                        @(Html.DevExtreme().FileUploader()
            .ID("file-uploader")
            .Name("myFile")
            .Multiple(false)
            .Accept("*")
            .UploadMode(FileUploadMode.Instantly)
            .UploadUrl(Url.Action("UploadExcel_YearlyPlan", "UploadFile"))
            .AllowedFileExtensions(new[] { ".xlsx", ".xls" })
            .MaxFileSize(1000000)
            .OnProgress("check_beforeupload")
            .OnFilesUploaded("onFilesUploaded")
            .OnValueChanged("fileUploader_valueChanged")
        )
                                                        <div class="content" id="selected-files">
                                                            <div>
                                                                <h4>Selected Files</h4>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="options">
                                                        <div class="caption">Options</div>
                                                        <div id="option-new" class="option">
                                                            <span>Tahun</span>
                                                            @(Html.DevExtreme().SelectBox()
                    .ID("select-years")
                    .DataSource(d => d.WebApi().Controller("ListYears"))
                    .DisplayExpr("years")
                    .ValueExpr("years")
                    .Width(100)
                )
                                                        </div>

                                                        @*<div class="option">
                                                                                                            <span>File types</span>
                                                                                                            @(Html.DevExtreme().SelectBox()
                                                                .DataSource(new[] {
                                                                    new { name = "All types", value = "*" },
                                                                    new { name = "Images", value = "image/*" },
                                                                    new { name = "Videos", value = "video/*" }
                                                                })
                                                                .Disabled(true)
                                                                .ValueExpr("value")
                                                                .DisplayExpr("name")
                                                                .Value("*")
                                                                .OnValueChanged("acceptOption_changed")
                                                            )
                                                                                                        </div>
                                                                                                        <div class="option">
                                                                                                            <span>Upload mode</span>
                                                                                                            @(Html.DevExtreme().SelectBox()
                                                                .DataSource(new[] { "instantly", "useButtons" })
                                                                .Disabled(true)
                                                                .Value("instantly")
                                                                .OnValueChanged("uploadMode_changed")
                                                            )
                                                                                                        </div>
                                                                                                        <div class="option">
                                                                                                            @(Html.DevExtreme().CheckBox()
                                                                .Disabled(true)
                                                                .Value(false)
                                                                .Text("Allow multiple files selection")
                                                                .OnValueChanged("multipleOption_changed")
                                                            )
                                                                                                        </div>*@
                                                        <div class="option" style="padding-top:20px;">
                                                            @*@Html.ActionLink("Download Template", "DownloadTemplateYearlyPlan", "UploadFile", null, new { @class = "btn btn-primary dropdown-toggle arrow-none waves-effect waves-light" })*@
                                                            @Html.ActionLink("Download Template", "DownloadItemNumberFromYearlyPlan", "UploadFile", null, new { @class = "btn btn-primary dropdown-toggle arrow-none waves-effect waves-light" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <div class="float-right d-none d-md-block">
                                            <button class="btn btn-secondary dropdown-toggle arrow-none waves-effect waves-light" type="button" data-dismiss="modal" aria-hidden="true">
                                                <i class="mdi mdi-close mr-2"></i> Tutup
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div><!-- /.modal-content -->
                        </div><!-- /.modal-dialog -->
                    </div><!-- /.modal -->
                    <!--  Modal content for the above example -->


                </div>
            </div>
        </div>
    </div>
    <!-- end row -->
    <div class="row">
        <div class="col-12" id="table-data-alatvm">
            @(Html.DevExtreme().DataGrid<ManageYearlyPlan>()
         .ID("gridContainer")
        .ShowBorders(true)

    // FOR DOWNLOAD FUNCTION
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .OnExporting("exporting")

         .AllowColumnReordering(true)
        .AllowColumnResizing(true)
        .ColumnAutoWidth(true)
        .ColumnFixing(c => c.Enabled(true))

        .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
    //.ColumnWidth(130)
    .ShowColumnLines(true).ColumnChooser(c => c.Enabled(true).Mode(GridColumnChooserMode.Select))
        .RowAlternationEnabled(true)
        .DataSource(d => d.WebApi().Controller("YearlyPlan").InsertAction(false).UpdateAction(true).DeleteAction(true).Key("id_recnum_yrpln"))
        .Columns(columns => {
            //columns.Add().Caption("No").Alignment(HorizontalAlignment.Center).Width(80).AllowEditing(false).CellTemplate(new JS("cell_numbering"));
            columns.AddFor(m => m.id_recnum_yrpln).Caption("ID Yearly Plan").Alignment(HorizontalAlignment.Center);
            columns.AddFor(m => m.pn_gs).Caption("PN GS").Alignment(HorizontalAlignment.Center);
            columns.AddFor(m => m.pn_customer).Caption("PN Customer").Alignment(HorizontalAlignment.Center).CssClass("column_class"); ;
            columns.AddFor(m => m.tahun).Caption("Tahun").Alignment(HorizontalAlignment.Center).GroupIndex(0);
            columns.AddFor(m => m.qty_total).Caption("Total").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
            columns.Add().Caption("Yearly Plan").Columns(mergeColumn =>
            {
                mergeColumn.AddFor(m => m.qty_1).Caption("Januari").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_2).Caption("Februari").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_3).Caption("Maret").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_4).Caption("April").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_5).Caption("Mei").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_6).Caption("Juni").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_7).Caption("Juli").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_8).Caption("Agustus").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_9).Caption("September").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_10).Caption("Oktober").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_11).Caption("November").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
                mergeColumn.AddFor(m => m.qty_12).Caption("Desember").Width(130).Alignment(HorizontalAlignment.Center).Format(Format.FixedPoint);
            }).Alignment(HorizontalAlignment.Center);


            columns.AddFor(m => m.date_insert).Caption("Insert Date").Alignment(HorizontalAlignment.Center).Format("dd/MM/yyyy HH:mm:ss aa");
            columns.AddFor(m => m.date_update).Caption("Update Date").Alignment(HorizontalAlignment.Center).Format("dd/MM/yyyy HH:mm:ss aa");
        })
        .Grouping(grouping => grouping.AutoExpandAll(false).ExpandMode(GridGroupingExpandMode.RowClick))
        .GroupPanel(groupPanel => groupPanel.Visible(true))
        .Summary(s => s.TotalItems(items =>
        {
            items.AddFor(m => m.tahun).CustomizeText("customSummary");

            items.AddFor(m => m.qty_total)
            //.CustomizeText("customSummaryTotal")
            .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_1)
            //.CustomizeText("customSummaryTotal")
            .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_2)
            //.CustomizeText("customSummaryTotal")
            .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_3)
            //.CustomizeText("customSummaryTotal")
            .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_4)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_5)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_6)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_7)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_8)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_9)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_10)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_11)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

            items.AddFor(m => m.qty_12)
             //.CustomizeText("customSummaryTotal")
             .DisplayFormat("{0}")
            .ValueFormat(Format.FixedPoint)
            .SummaryType(SummaryType.Sum);

        }
                ))
        .Paging(p => p.PageSize(10))
        .Pager(pager =>
        {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new JS("[10, 50, 'all']"));
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
        })
       .Editing(editing =>
       {
           editing.Mode(GridEditMode.Row);
           editing.AllowUpdating(true);
           editing.AllowAdding(false);
           editing.AllowDeleting(true);
           editing.UseIcons(true);
       })
       //.Selection(selection => selection.Mode(SelectionMode.Single))
       //.OnSelectionChanged("onSelectionChanged")
       .OnToolbarPreparing("onToolbarPreparing")
       .SearchPanel(f => f.Visible(true))
    .FilterRow(f => f.Visible(false))
    .HeaderFilter(f => f.Visible(true))
        //.GroupPanel(p => p.Visible(true))
        //.Grouping(g => g.AutoExpandAll(false))
        .RemoteOperations(true)
        //.Summary(s => s
        //    .TotalItems(totalItems => {
        //        totalItems.AddFor(m => m.ShipCity).SummaryType(SummaryType.Count);
        //    })
        //    .GroupItems(groupItems => {
        //        groupItems.Add().SummaryType(SummaryType.Count);
        //    })
        )
        </div>
    </div>
    <!-- container-fluid -->
</div>
<!-- content -->

@section scripts
{
    <script>


        $(document).ready(function () {


        });

        function exporting(e) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('YearlyPlan');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Download-YearlyPlan.xlsx');
                });
            });
            e.cancel = true;
        }

        function cell_numbering(cellElement, cellInfo) {
            cellElement.text(cellInfo.rowIndex + 1);
        }

        function customSummary(data) {
            return "Total: ";
        }

        function getFileUploaderInstance() {
            return $("#file-uploader").dxFileUploader("instance");
        }

        function check_beforeupload(e) {
            let selectTahun = document.getElementById("select-years");
            let instanceSelectedTahun = DevExpress.ui.dxSelectBox.getInstance(selectTahun);
            var valueTahun = instanceSelectedTahun.option("value");

            if (valueTahun == null) {
                e.request.abort();
                DevExpress.ui.dialog.alert("Mohon untuk mengisi Tahun terlebih dahulu.", "Informasi");
            }
        }

        function onFilesUploaded(e) {
            DevExpress.ui.dialog.alert("Proses Upload Selesai", "Informasi");
            location.reload(true);
        }

        function fileUploader_valueChanged(e) {
            let selectTahun = document.getElementById("select-years");
            let instanceSelectedTahun = DevExpress.ui.dxSelectBox.getInstance(selectTahun);
            var valueTahun = instanceSelectedTahun.option("value");

            if (valueTahun == null) {
                return;
            }

            if (valueTahun != null) {
                var files = e.value;
                if (files.length > 0) {
                    $("#selected-files .selected-item").remove();

                    var urlBase = updateQueryStringParameter(e.component.option("uploadUrl"), "tahun", valueTahun);
                    e.component.option("uploadUrl", urlBase);

                    $.each(files, function (i, file) {
                        var $selectedItem = $("<div />").addClass("selected-item");
                        $selectedItem.append(
                            $("<span />").html("Name: " + file.name + "<br/>"),
                            $("<span />").html("Size " + file.size + " bytes" + "<br/>"),
                            $("<span />").html("Type " + file.type + "<br/>"),
                            $("<span />").html("Last Modified Date: " + file.lastModifiedDate)
                        );
                        $selectedItem.appendTo($("#selected-files"));
                    });
                    $("#selected-files").show();
                    //location.reload(true);
                }
                else
                    $("#selected-files").hide();
            }

        }

        function updateQueryStringParameter(uri, key, value) {
            var re = new RegExp("[?&]" + key + "=.*?(&|$)", "i");
            var separator = uri.indexOf('?') !== -1 ? "&" : "?";
            if (uri.match(re)) {
                return uri.replace(re, '$1' + key + "=" + value + '$2');
            } else {
                return uri + separator + key + "=" + value;
            }
        }

        function acceptOption_changed(e) {
            getFileUploaderInstance().option("accept", e.value);
        }

        function uploadMode_changed(e) {
            getFileUploaderInstance().option("uploadMode", e.value);
        }

        function multipleOption_changed(e) {
            getFileUploaderInstance().option("multiple", e.value);
        }


        let refreshButton;
        let uploadButton;

        function onToolbarPreparing(e) {
            var dataGrid = e.component;

            e.toolbarOptions.items[0].showText = 'always';
            e.toolbarOptions.items.push({
                location: "after",
                widget: "dxButton",
                options: {
                    text: "Upload Excel",
                    icon: "upload",
                    disabled: false,
                    onClick: onUploadBtnClick,
                    onInitialized: function (e) {
                        uploadButton = e.component;
                    }
                }
            });

            e.toolbarOptions.items[1].showText = 'always';
            e.toolbarOptions.items.push({
                location: "after",
                widget: "dxButton",
                options: {
                    text: "Refresh",
                    icon: "refresh",
                    disabled: false,
                    onClick: onRefreshBtnClick,
                    onInitialized: function (e) {
                        refreshButton = e.component;
                    }
                }
            });
        }

        function onUploadBtnClick() {
            document.getElementById("btn-modal-show").click();
        }

        function onRefreshBtnClick() {
            //location.reload(true);
            refreshTableDevExpress();
        }

         function refreshTableDevExpress() {
            let dataGrid = document.getElementById("gridContainer");
            let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
            var $link = '@Html.Raw(Url.Action("YearlyPlan", "api"))';

             instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                 key: "id_recnum_yrpln",
                 loadUrl: $link,
                 insertUrl: $link,
                 updateUrl: $link,
                 deleteUrl: $link
             }));

             instanceDataGrid.refresh();
        }

        function onDeleteBtnClick() {
            //let dataGrid = $("#gridContainer").dxDataGrid("instance");
            //$.when.apply($, dataGrid.getSelectedRowsData().map(function (data) {
            //    return dataGrid.getDataSource().store().remove(data.ID);
            //})).done(function () {
            //    dataGrid.refresh();
            //});
        }

        function onSelectionChanged(data) {
            //refreshButton.option("disabled", !data.selectedRowsData.length);
        }

    </script>

}